

def checkoutortuk(branch) {
    echo "Checkout ort-uk"
    echo "${branch}"   
        sh "mkdir -p ort-uk"
        dir('ort-uk') {
            checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/ort-uk', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
        }
}
def buildortuk() {
    container('nodejs') {
        sh 'echo ${WORKSPACE}'
        sh 'echo $BUILD_NUMBER'
            dir('ort-uk') {
                sh 'ls'
                sh 'npm install --force'
                sh 'CI=false npm run build'
                    dir ('${WORKSPACE}/ort-uk/build') {
                        sh 'ls'
                        sh 'echo changing to directory'
                    }
                }
            }
}
def uploadortukToGCS(bucketname) {
   echo "Upload to GCS"  
   echo "My branch & GCS Bucket name is  ${branch}"
        container('gcloud') {
            dir('ort-uk') {
                sh 'ls'
                sh "tar -czvf ${newId}.tar.gz *.yaml build/*"
    		    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/ort-uk/ --recursive"
    		    sh "tar -xzvf ${newId}.tar.gz"
                //sh "gcloud storage cp ${WORKSPACE}/ort-uk/*.yaml gs://sqinternational-cicd.appspot.com/${bucketname}/ort-uk/ort-uk@$VERSION_NUMBER --recursive"
            }
            
            // sh "gcloud storage cp ${WORKSPACE}/ort-uk/build/* gs://sqinternational-cicd.appspot.com/${bucketname}/ort-uk/ort-uk@$VERSION_NUMBER/build --recursive"
            CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }
}

def checkoutControlDeskuk(branch) {
    echo "Checkout control-desk-uk"
        sh "mkdir -p control-desk-uk"
        echo "test control-desk-uk"
        echo "My Branch ${branch}"
            dir('control-desk-uk') {
                checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/control-desk-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
                // git branch: "${branch}",
                // credentialsId: 'serviceaccount',
                // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/control-desk-uk.git'
                // sh 'ls'
            }

}
def buildControlDeskuk() {
    echo "Build control-desk-uk"  
    // container('phrase') {
    //     dir('control-desk-uk') {
    //         sh 'phrase version'
    //         sh 'phrase push'
    //         sh 'phrase pull'
    //         sh 'git config --global --add safe.directory ${WORKSPACE}/control-desk-uk'
    //         sh 'git status'
    //     }
    // }
    container('node-cd-js') {
        sh 'echo ${WORKSPACE}'
        sh 'ls'
        dir('control-desk-uk') {
            //sh 'git config --global --add safe.directory ${WORKSPACE}/control-desk-uk'
            //sh 'git status'
            sh 'npm install --force'
            sh 'npm install @emotion/styled'
            sh 'npm install react-checkbox-tree@1.5.0 --force'
            sh 'CI=false npm run build'
            dir ('${WORKSPACE}/control-desk-uk/build') {
                sh 'echo changing to directory'
                sh 'ls'
            
            }
        }
    }   
}
def uploadControlDeskukToGCS(bucketname) {
    echo "Upload control-desk-uk to GCS" 
    echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') {
            dir('control-desk-uk') {
                sh 'ls'
                sh "tar -czvf ${newId}.tar.gz *.yaml build/*"
    		    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/control-desk-uk/ --recursive"
    		    sh "tar -xzvf ${newId}.tar.gz"
                //sh "gcloud storage cp ${WORKSPACE}/control-desk-india/*.yaml gs://sqinternational-cicd.appspot.com/${bucketname}/control-desk-uk/control-desk-uk@$VERSION_NUMBER --recursive"
            }
            
            //sh "gcloud storage cp ${WORKSPACE}/control-desk-india/build/* gs://sqinternational-cicd.appspot.com/${bucketname}/control-desk-uk/control-desk-uk@$VERSION_NUMBER/build --recursive"
            CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }   
}

def checkoutewalletuk(branch) {
    echo "Checkout ewallet-uk"
        sh "mkdir -p ewallet-uk"
            dir('ewallet-uk') {
                checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/ewallet-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
                // git branch: "${branch}",
                // credentialsId: 'serviceaccount', 
                // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/ewallet-uk.git' 
            }
}
def buildewalletuk() {
    echo "Building ewallet-uk"
        dir('ewallet-uk'){
            container('node-js') {
                sh 'npm install'
                sh 'CI=false npm run build'
                dir ('build') {
                    sh 'echo changing to directory'
                    sh 'ls -l'
                }
            }
        }
}
def uploadewalletukToGCS(bucketname) {
    echo "Upload ewallet-uk to GCS"
    echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') {
            dir('ewallet-uk'){
                sh "tar -czvf ${newId}.tar.gz build/*"
    		    sh 'ls'
    		    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/ewallet-uk/ --recursive"
    		    sh "tar -xzvf ${newId}.tar.gz" 
            }    
            // sh "gcloud storage cp ${WORKSPACE}/ewallet-uk/build/* gs://sqinternational-cicd.appspot.com/${bucketname}/ewallet-uk/ewallet-uk@$VERSION_NUMBER --recursive"
            CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }

            
}

def checkouttime2eatwebuk(branch) {
    echo "Checkout PWA"
        sh "mkdir -p time2eatweb-uk"
            dir('time2eatweb-uk') {
                checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/time2eatweb-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
                // git branch: "${branch}",
                // credentialsId: 'serviceaccount',
                // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/time2eatweb-uk.git'
            }

}
def buildtime2eatwebuk() {
    echo "Build PWA"
        container('node-js') {
             sh 'echo ${WORKSPACE}'
                dir('time2eatweb-uk') {
                    sh 'npm install --force'
                    //sh 'npm update'
                    //sh 'export NODE_OPTIONS=--openssl-legacy-provider'
                    sh 'CI=false && export NODE_OPTIONS=--openssl-legacy-provider && npm run build:app1'
                    sh 'CI=false && export NODE_OPTIONS=--openssl-legacy-provider && npm run build:app2'
                    sh 'CI=false && export NODE_OPTIONS=--openssl-legacy-provider && npm run build:app3'
                    sh 'CI=false && export NODE_OPTIONS=--openssl-legacy-provider && npm run build:app4'
                    sh 'CI=false && export NODE_OPTIONS=--openssl-legacy-provider && npm run build:app5'
                        dir ('${WORKSPACE}/time2eatweb-uk/build') {
                            sh 'echo changing to directory'
                       }
                    }
                }

}
def uploadtime2eatwebukToGCS(bucketname) {
    echo "Upload time2eatweb-uk to GCS"
    echo "My branch & GCS Bucket name is ${branch}"
    container('gcloud') {
        dir('time2eatweb-uk') {
            sh 'ls'
            sh "tar -czvf ${newId}.tar.gz *.yaml build/*"
    	    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/time2eatweb-uk/ --recursive"
    	    sh "tar -xzvf ${newId}.tar.gz"
            //sh "gcloud storage cp ${WORKSPACE}/time2eatweb-uk/*.yaml gs://sqinternational-cicd.appspot.com/${bucketname}/time2eatweb-uk/time2eatweb-uk@$VERSION_NUMBER --recursive"
        }
       
        //sh "gcloud storage cp ${WORKSPACE}/time2eatweb-uk/build/* gs://sqinternational-cicd.appspot.com/${bucketname}/time2eatweb-uk/time2eatweb-uk@$VERSION_NUMBER/build --recursive"
        CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
    }

}

def checkoutvendordashboard(branch) {
    echo "Checkout Vendordashboard"
        sh "mkdir -p unified_webstack"
            dir('unified_webstack') {
                checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/unified_webstack.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
                // git branch: "${branch}",
                // credentialsId: 'serviceaccount',
                // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/unified_webstack.git'
            }

}
def buildvendordashboard() {
    echo "Buliding Vendordashboard"
        dir('unified_webstack') {         
            container('node-js') {
                dir ('${WORKSPACE}/frontend') {
                    sh 'npm install -g gulp'
                    sh 'gulp build_vdashboard'
                        dir ('dist/vdashboard/admindashboard'){
                            sh 'ls *'
                    }
                }
            }             
        }      

}   
def uploadvendordashboardToGCS(bucketname) {
    echo "Uploading to GCS Bucket"
    echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') {
            dir('unified_webstack/frontend/dist/vdashboard/') {
                sh "tar -czvf ${newId}.tar.gz admindashboard/*"
        	    sh 'ls'
        	    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/vendor-dashboard/ --recursive"
        	    sh "tar -xzvf ${newId}.tar.gz"
            }    
            // sh "gcloud storage cp ${WORKSPACE}/unified_webstack/frontend/dist/vdashboard/admindashboard/* gs://sqinternational-cicd.appspot.com/${bucketname}/vendor-dashboard/vdashboard@$VERSION_NUMBER --recursive"
             CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }

}

def checkoutadmindashboarduk(branch) {
    echo "Checkout admin-dashboard-uk"
    echo "${branch}"
        sh "mkdir -p admin-dashboard-uk"                
        dir('admin-dashboard-uk') {
             checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/admin-dashboard-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
            // git branch: "${branch}",
            // credentialsId: 'serviceaccount',
            // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/admin-dashboard-uk.git' 
            // sh 'ls'
        }
}
def buildadmindashboarduk() {
    echo"Building admin-dashboard-uk"
        dir('admin-dashboard-uk') {         
            container('node-js') {
                sh 'npm install --force'
                sh 'CI=false npm run build'
                dir ('build') {
                    sh 'echo changing to directory'
                    sh 'ls -l'
                }
            }             
        }
}
def uploadadmindashboardukToGCS(bucketname) {
    echo "Uploading admin-dashboard-uk to GCS Bucket"   
    echo "My branch & GCS Bucket name is ${branch}"     
    container('gcloud') {
        dir('admin-dashboard-uk') { 
            sh 'ls'
            sh "tar -czvf ${newId}.tar.gz build/*"
    	    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/admin-dashboard-uk/ --recursive"
    	    sh "tar -xzvf ${newId}.tar.gz"
            // sh "gcloud storage cp ${WORKSPACE}/admin-dashboard-uk/build/* gs://sqinternational-cicd.appspot.com/${bucketname}/admin-dashboard-uk/admindashboard@$VERSION_NUMBER --recursive"
        }
        CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
    }    
}

def checkoutsmartqcloudbackend(branch) {
    echo "Checkout cloud-backend-uk"
        sh "mkdir -p cloud-backend-uk"
            dir('cloud-backend-uk') {                        
               checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/cloud-backend-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            sh "touch smartqcloudbackend.txt"
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
                // git branch: "${branch}",
                // credentialsId: 'serviceaccount',
                // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/cloud-backend-uk.git'
                // sh 'ls -lrt'
                // sh "touch smartqcloudbackend.txt"
            }

}   
def uploadsmartqcloudbackendToGCS(bucketname) {
    echo "Uploading smartq-backend to GCS"
    echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') {
            sh "touch cloud-backend-uk.txt"
            sh "tar -czvf ${newId}.tar.gz cloud-backend-uk.txt"
    	    sh 'ls'
    	    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/cloud-backend-uk/ --recursive"
    	    //sh "tar -xzvf ${newId}.tar.gz"
            //sh "gcloud storage cp ${WORKSPACE}/cloud-backend-uk/smartqcloudbackend.txt gs://sqinternational-cicd.appspot.com/${bucketname}/cloud-backend-uk/cloud-backend-uk@$VERSION_NUMBER --recursive"
            CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
                  
        }

}

def checkoutsqmicroservicesbackend(branch) {
    echo "Checkout sqmicroservicesbackend"
    sh "mkdir -p microservices-backend-uk"
        dir('microservices-backend-uk') {                        
            checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/microservices-backend-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            //sh "touch sqmicroservicesbackend.txt"
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
            // git branch: "${branch}",
            // credentialsId: 'serviceaccount',
            // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/microservices-backend-uk.git'
            // sh 'ls -lrt'
            // sh "touch sqmicroservicesbackend.txt"
        }

}
def uploadsqmicroservicesbackendToGCS(bucketname) {
    echo "Uploading microservices-backend-uk to GCS Bucket"
    echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') { 
            sh "touch sqmicroservicesbackend.txt"
            sh "tar -czvf ${newId}.tar.gz sqmicroservicesbackend.txt"
    	    sh 'ls'
    	    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/microservices-backend-uk/ --recursive"
            //sh "gcloud storage cp ${WORKSPACE}/microservices-backend-uk/sqmicroservicesbackend.txt gs://sqinternational-cicd.appspot.com/${bucketname}/microservices-backend-uk/microservices-backend-uk@$VERSION_NUMBER-${newId}/default --recursive"
           CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }
}

def checkoutcontroldeskflutteruk(branch) {
    echo "Checkout control-desk-flutter-uk"
    echo "${branch}"   
        sh "mkdir -p control-desk-flutter-uk"
        dir('control-desk-flutter-uk') {
            checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/control-desk-flutter-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            // git branch: "${branch}",
            // credentialsId: 'bitbucket api',
            // url: 'https://yash123devops@bitbucket.org/bottlelabtech/control-desk-uk-flutter.git'
            // sh 'ls'
            
            // Get the commit ID of the current HEAD
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    
            // Print the commit ID
            //echo "CommitId: ${commitId}"
            sh "echo ${commitId}"
            newId = "${commitId}"
        }
}
def buildcontroldeskflutteruk() {
    container('flutter') {
        sh 'echo ${WORKSPACE}'
        sh 'echo $BUILD_NUMBER'
            dir('control-desk-flutter-uk') {
                sh 'flutter clean'
                sh 'flutter pub get'
                sh 'flutter build web --web-renderer canvaskit'
                sh 'ls'
                dir ('${WORKSPACE}/build/web') {
                    sh 'ls'
                    sh 'pwd'
                    //sh 'echo changing to directory'
                }
            }
    }
}
def uploadcontroldeskflutterukToGCS(bucketname) {
  echo "Upload to GCS"  
  echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') {
            dir('control-desk-flutter-uk') {
                sh 'ls'
		        sh "tar -czvf ${newId}.tar.gz *.yaml build/*"
                sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/control-desk-flutter-uk/  --recursive"
		        sh "tar -xzvf ${newId}.tar.gz"
            }
            //sh "tar -czvf ${newId}.tar.gz control-desk-flutter-uk/*.yaml control-desk-flutter-uk/build/*"
		    //sh 'ls'
		    
            //sh "gcloud storage cp ${WORKSPACE}/control-desk-flutter-uk/build/* gs://sqinternational-cicd.appspot.com/${bucketname}/control-desk-flutter-uk/control-desk-flutter-uk.tar.gz-${newId} --recursive"
            CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }
}

def checkouttime2eat_flutter(branch) {
    echo "Checkout time2eat_flutter"
    echo "${branch}"   
        sh "mkdir -p time2eat_flutter"
        dir('time2eat_flutter') {
            checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/main-app-uk.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            // git branch: "${branch}",
            // credentialsId: 'bitbucket api',
            // url: 'https://yash123devops@bitbucket.org/bottlelabtech/control-desk-uk-flutter.git'
            // sh 'ls'
            
            // Get the commit ID of the current HEAD
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    
            // Print the commit ID
            //echo "CommitId: ${commitId}"
            sh "echo ${commitId}"
            newId = "${commitId}"
        }
}
def buildtime2eat_flutter() {
    container('time2eatflutter') {
        sh 'echo ${WORKSPACE}'
        sh 'echo $BUILD_NUMBER'
            dir('time2eat_flutter') { 
                sh 'ls'
                sh 'echo "My secret value is: $MY_SECRET"'
                //sh "git config --global credential.helper"
                sh "git config --global credential.helper store"
                sh "echo 'https://Devopssmartq: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@github.com' > ~/.git-credentials"
                //sh "git config --global credential.helper"
                sh "git config --list"
                sh "git clone https://github.com/Bottle-Lab-Technologies-PVT-LTD/sq_ui_lib.git"
                sh 'flutter clean'
                sh 'flutter pub get'
                sh 'dart run phrase'
                sh 'flutter pub upgrade'
                sh 'flutter build web'
                sh 'ls'
                dir ('${WORKSPACE}/build/web') {
                    sh 'ls'
                    sh 'pwd'
                }                   
            }
    }
}
def uploadtime2eat_flutterToGCS(bucketname) {
  echo "Upload to GCS"  
  echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') {
            dir('time2eat_flutter') {
                sh 'ls'
		        sh "tar -czvf ${newId}.tar.gz *.yaml build/*"
                sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/time2eat-flutter/  --recursive"
		        sh "tar -xzvf ${newId}.tar.gz"
            }
            //sh "tar -czvf ${newId}.tar.gz time2eat_flutter/*.yaml time2eat_flutter/build/*"
		    //sh 'ls'
		    
            //sh "gcloud storage cp ${WORKSPACE}/time2eat_flutter/build/* gs://sqinternational-cicd.appspot.com/${bucketname}/time2eat_flutter/time2eat_flutter.tar.gz-${newId} --recursive"
            CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }
}
def checkoutphrase_translate(branch) {
    echo "Checkout phrase_translate"
    sh "mkdir -p phrase_translate"
        dir('phrase_translate') {                        
            checkout([$class: 'GitSCM', 
                branches: [[name: branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'CleanCheckout']], 
                userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/phrase_translate.git', credentialsId: 'git/devops/new',]]])
                    
            sh 'ls -lrt'
            //sh "touch sqmicroservicesbackend.txt"
            def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            sh "echo ${commitId}"
            newId = "${commitId}"
            // git branch: "${branch}",
            // credentialsId: 'serviceaccount',
            // url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/microservices-backend-uk.git'
            // sh 'ls -lrt'
            // sh "touch sqmicroservicesbackend.txt"
        }

}
def uploadphrase_translateToGCS(bucketname) {
    echo "Uploading phrase_translate to GCS Bucket"
    echo "My branch & GCS Bucket name is ${branch}"
        container('gcloud') { 
            sh "touch phrase_translate.txt"
            sh "tar -czvf ${newId}.tar.gz phrase_translate.txt"
    	    sh 'ls'
    	    sh "gcloud storage cp ${newId}.tar.gz gs://sqinternational-cicd.appspot.com/UK_Region/${bucketname}/phrase_translate/ --recursive"
            //sh "gcloud storage cp ${WORKSPACE}/microservices-backend-uk/sqmicroservicesbackend.txt gs://sqinternational-cicd.appspot.com/${bucketname}/microservices-backend-uk/microservices-backend-uk@$VERSION_NUMBER-${newId}/default --recursive"
           CLOUD_URL = "https://console.cloud.google.com/storage/browser/sqinternational-cicd.appspot.com/${branch}/${bitBucketProject}"
        }
}
pipeline {
    agent {
    
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        branch:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"
                
          - name: nodejs
            image: node:14.19.0
            command:
            - cat
            tty: true

          - name: node-cd-js
            image: node:14.17.4
            requests:
                memory: "4096Mi"  # Increase the requested memory
                cpu: "500m"
            limits:
                memory: "8192Mi"  # Increase the maximum allowed memory
                cpu: "1000m"
            command:
            - cat
            tty: true

          - name: node-js
            image: node:20.12.0
            command:
            - cat
            tty: true

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true

          - name: flutter
            image: instrumentisto/flutter:3.10.2
            command:
            - cat
            tty: true 
            
          - name: time2eatflutter
            image: instrumentisto/flutter:3.24.3
            resources:
            requests:
                memory: "4096Mi"  # Increase the requested memory
                cpu: "500m"
            limits:
                memory: "8192Mi"  # Increase the maximum allowed memory
                cpu: "1000m"
            command:
            - cat
            tty: true     

          - name: phrase
            image: ubuntu:latest
            command:
            - sh
            args:
            - -c
            - |
              apt-get update && apt-get install -y wget tar && \
              wget https://github.com/phrase/phrase-cli/releases/download/2.3.0/phrase_linux_amd64.tar.gz && \
              tar -xzf phrase_linux_amd64.tar.gz && \
              cd usr/local/bin && ls -l && cd ../../.. && \
              ls -l && mv phrase_linux_amd64 usr/local/bin/phrase && \
              chmod +x /usr/local/bin/phrase && \
              phrase version && \
              apt-get update && apt-get install -y git && \
              sleep 99d          
        '''        
        }
    }

    parameters {

    choice(name: 'BitBucketProject', choices: ['ort-uk', 'control-desk-uk', 'ewallet-uk', 'time2eatweb-uk', 'vendor-dashboard','admin-dashboard-uk', 'cloud-backend-uk', 'microservices-backend-uk','control-desk-flutter-uk', 'time2eat_flutter', 'phrase_translate'], description: 'Select BitBucket Project')
    choice(name: 'Branch', choices: ['auto-sprint', 'auto-release', 'master', 'hotfix'], description: 'Select Branch')
    string(name: 'Hotfix_Branch', description: 'Enter the branch name')
    string(name: 'CommitId', defaultValue:" ", trim: true, description: 'Enter the commitId')
    }


        
    environment {
        //environment='SPRINT'
        //def newid = '${NewID}'
	//echo "${newid}"
        MY_SECRET = credentials('git/devops/new')
        def CLOUD_URL = 'Your_URL'
        VERSION_NUMBER = VersionNumber([
            versionNumberString: '${BUILD_DATE_FORMATTED, "yyyy"}-${BUILDS_TODAY}',  
            worstResultForIncrement: 'SUCCESS'
        ])
    }

    stages {  
        stage('Building All Pipeline') {
            steps {
                script {
                    def bitBucketProject = params.BitBucketProject.toLowerCase()
                    def branch = params.Branch
                    def hotfixbranch = params.Hotfix_Branch 
                    def commitid = params.CommitId
                    def bucketname = params.Branch
                    mail_url = 'https://cpgplc.webhook.office.com/webhookb2/6d5ff299-54f8-4bb3-911b-4ef2d419e335@cd62b7dd-4b48-44bd-90e7-e143a22c8ead/IncomingWebhook/3b95c290077440da9d684a0c498039e1/1b69cb54-bc9e-4431-98fa-5afcb910e9d4'
                    
                    if (Hotfix_Branch != '') {
                    	bucketname="${hotfixbranch}"
                    	branch="${hotfixbranch}"
                    } else if (CommitId != ''){
                    	branch="${commitid}"                    	
                    } else {
                        branch = params.Branch
                    }
                    
                    if (CommitId != '' && Hotfix_Branch != ''){
                        branch="${commitId}"
                    }
                      
                    
                    echo "Selected BitBucket Project: ${bitBucketProject}"
                    echo "Selected Branch: ${branch}"
                    echo "Entered Hotfix_Branch: ${hotfixbranch}"
                    echo "Selected GCS Bucket: ${bucketname}"
                    def buildPipeline = false


                    if (bitBucketProject == 'ort-uk') {
                        checkoutortuk(branch)
                        buildortuk()
                        uploadortukToGCS(bucketname)
                        buildPipeline = true
                    } else if (bitBucketProject == 'control-desk-uk') {
                        checkoutControlDeskuk(branch)
                        buildControlDeskuk()
                        uploadControlDeskukToGCS(bucketname)
                        buildPipeline = true 
                    } else if (bitBucketProject == 'ewallet-uk') {
                        checkoutewalletuk(branch)
                        buildewalletuk()
                        uploadewalletukToGCS(bucketname)
                        buildPipeline = true
                    } else if (bitBucketProject == 'time2eatweb-uk') {
                        checkouttime2eatwebuk(branch)
                        buildtime2eatwebuk()
                        uploadtime2eatwebukToGCS(bucketname)
                        buildPipeline = true
                    } else if (bitBucketProject == 'vendor-dashboard') {
                        checkoutvendordashboard(branch)
                        buildvendordashboard()
                        uploadvendordashboardToGCS(bucketname)
                        buildPipeline = true
                    } else if (bitBucketProject == 'admin-dashboard-uk') {
                        checkoutadmindashboarduk(branch)
                        buildadmindashboarduk()
                        uploadadmindashboardukToGCS(bucketname)
                        buildPipeline = true                    
                    } else if (bitBucketProject == 'cloud-backend-uk') {
                        checkoutsmartqcloudbackend(branch)
                        uploadsmartqcloudbackendToGCS(bucketname)
                        buildPipeline = true
                    } else if (bitBucketProject == 'microservices-backend-uk') {
                        checkoutsqmicroservicesbackend(branch)
                        uploadsqmicroservicesbackendToGCS(bucketname)
                        buildPipeline = true
                    } else if (bitBucketProject == 'control-desk-flutter-uk') {
                        checkoutcontroldeskflutteruk(branch)
                        buildcontroldeskflutteruk()
                        uploadcontroldeskflutterukToGCS(bucketname)
                        buildPipeline = true  
                    } else if (bitBucketProject == 'time2eat_flutter') {
                        checkouttime2eat_flutter(branch)
                        buildtime2eat_flutter()
                        uploadtime2eat_flutterToGCS(bucketname)
                        buildPipeline = true    
                    }  else if (bitBucketProject == 'phrase_translate') {
                        checkoutphrase_translate(branch)
                        uploadphrase_translateToGCS(bucketname)
                        buildPipeline = true    
                    }          

                    if (!buildPipeline) {
                        error("Invalid combination of BitBucket Project and Branch.")
                    } 
                }
            }
        }
    }

    post{
        always{
            script {
                office365ConnectorSend webhookUrl: "${mail_url}",
                message : "Build is running.\nJob Name: ${Job_Name}.\nBuild Status: ${currentBuild.currentResult}.\nJenkins Build Number: ${Build_Number}.\nApplication  Name: ${bitBucketProject}.\nGCP Cloud URL: ${CLOUD_URL}.\n Version Number: ${VERSION_NUMBER} ",
                status: "Build Status# ${currentBuild.currentResult}"
            }
        }
    }
}

