/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
import groovy.transform.Field
@Field def ARR_VERIFY_SERVICE = []

// def setGcloudProject(selectedProjects){
//     container('gcloud') {
//         echo "Selected APP_ENGINE_PROJECT_ID: $selectedProjects"
//         sh "gcloud config set project $selectedProjects"
//     }    
// }



properties([
    parameters([
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        return [ "All:selected", "sqpreprod-india", "sqpreprod-uk", "sqpreprod-us", "sqpreprod-spain", "sqpreprod-de", 
                                       "sqpreprod-au", "sqpreprod-hk", "sqpreprod-jp", "sqpreprod-sng",
                                       "sqpreprod-nz", "smartqprd-au", "smartqprd-be", "smartqprd-chi", "smartqprd-cn", "smartqprd-de", 
                                       "smartqprd-fi", "smartqprd-hk",
                                      "smartqprd-ie",  "smartqprd-india", "smartqprd-it", "smartqprd-jp", "smartqprd-mex", "smartqprd-nl", 
                                      "smartqprd-nz", "smartqprd-sng", "smartqprd-spain",  "smartqprd-uae",
                                      "smartqprd-uk", "smartqprd-us"]
                    '''                  
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        def chocies = [ "All:selected", "sqpreprod-india", "sqpreprod-uk", "sqpreprod-us", "sqpreprod-spain", "sqpreprod-de",
                                        "sqpreprod-au", "sqpreprod-hk", "sqpreprod-jp", "sqpreprod-sng",
                                        "sqpreprod-nz", "smartqprd-au", "smartqprd-be", "smartqprd-chi", "smartqprd-cn", "smartqprd-de", 
                                        "smartqprd-fi", "smartqprd-hk",
                                        "smartqprd-ie",  "smartqprd-india", "smartqprd-it", "smartqprd-jp", "smartqprd-mex", "smartqprd-nl", 
                                        "smartqprd-nz", "smartqprd-sng", "smartqprd-spain",  "smartqprd-uae",
                                        "smartqprd-uk", "smartqprd-us"]                                    
                        return choices
                    '''
                ]
            ]
        ]
    ])
])
def checkingVersion(ARR_SELECTED_SERVICE){
    container('gcloud'){
        ARR_SELECTED_SERVICE.each { project ->
            echo "Selected APP_ENGINE_PROJECT_ID: $project"
            sh "gcloud config set project $project"
            def overallVersionCount = sh(script: 'gcloud app versions list --sort-by=~last_deployed_time --format="csv[no-heading](id)" | wc -l', returnStdout: true).trim().toInteger()
            echo "Overall Number of Versions: ${overallVersionCount}"

            if (overallVersionCount > 180) {
                def options = 'controldesk,control-desk-flutter,web-ort,foodbook-web,smartq-pwa,default,time2eat,time2eat-flutter,baweb,appservice,backgroundtasks,taskqservice,bqreports,reports,dashboard,sso,integration,time2eat-flutter,app,pricebook,cncms,betaapp-web-ort,betaapp-taskqservice,' +
                               'betaapp-default,betaapp-smartq-pwa,betaapp-app,betaapp-backgroundtasks,betaapp-bqreports,betaapp-dashboard,betaapp-controldesk,flutter-cnc,flutter-mis,misms,phrasesmartq-flutter,vendor-mis-backend'                                                            

                def services = options.split(',')

                services.each { service ->
                    echo "Checking version for service: $service"
                    def serviceVersionCount = sh(script: "gcloud app versions list --service=$service --sort-by=~last_deployed_time --format=\"csv[no-heading](id)\" | wc -l", returnStdout: true).trim().toInteger()
                    
                    echo "Number of versions for $service: $serviceVersionCount"

                    if (params.APP_ENGINE_PROJECT_ID.contains("-india")) {
                        if (serviceVersionCount > 5) {
                            echo "Listing versions for $service"
                            def versionsList = sh(script: "gcloud app versions list --service=$service --sort-by=~last_deployed_time --format=\"csv[no-heading](id)\" | sed '1,8d'", returnStdout: true).trim()
                            echo "Versions for $service: $versionsList"
                            echo "Deleting old versions for $service"
                            versionsList.split().each { version ->
                                sh "gcloud app versions delete $version --service=$service --quiet"
                            }
                        }
                    } else if (serviceVersionCount > 8) {
                            echo "Listing versions for $service"
                            def versionsList = sh(script: "gcloud app versions list --service=$service --sort-by=~last_deployed_time --format=\"csv[no-heading](id)\" | sed '1,8d'", returnStdout: true).trim()
                            echo "Versions for $service: $versionsList"
                            echo "Deleting old versions for $service"
                            versionsList.split().each { version ->
                                sh "gcloud app versions delete $version --service=$service --quiet"
                            }
                        }   
                }
            }
        }    
    }
}
pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "4096Mi"
                cpu: "500m"
              limits:
                memory: "8192Mi"
                cpu: "1000m"

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }
    environment {
        INTERNATIONAL_FLAG = false
        VERSION_NUMBER = VersionNumber([
            versionNumberString: '${BUILD_DATE_FORMATTED, "yyyyMMddhhmmss"}', 
            worstResultForIncrement: 'SUCCESS'
        ])
    }
    stages {
        stage('Set GCloud ProjectID and check version') {
            steps {
                script{
                    def selectedProjects = params.APP_ENGINE_PROJECT_ID
                    def ARR_SELECTED_SERVICE = []
                    if (selectedProjects == "All") {
                        def options = 'sqpreprod-india,sqpreprod-uk,sqpreprod-us,sqpreprod-spain,sqpreprod-de,sqpreprod-au,sqpreprod-hk,sqpreprod-jp,sqpreprod-sng,sqpreprod-nz,smartqprd-au,smartqprd-be,smartqprd-chi,smartqprd-cn,smartqprd-de,smartqprd-fi,smartqprd-hk,smartqprd-ie,smartqprd-india,smartqprd-it,smartqprd-jp,smartqprd-mex,smartqprd-nl,smartqprd-nz,smartqprd-sng,smartqprd-spain,smartqprd-uae,smartqprd-uk,smartqprd-us'
                        ARR_SELECTED_SERVICE = options.split(',')
                    } else {
                        ARR_SELECTED_SERVICE = [selectedProjects]
                    }

                    echo "Processing projects: $ARR_SELECTED_SERVICE"
                    checkingVersion(ARR_SELECTED_SERVICE)                            
                }    
            }  
        } 
    } 
    post{
	   always{
		   script{
			   mail bcc: '', body: "Version delete pipeline is running.\nJob Name: ${Job_Name}.\nBuild Status: ${currentBuild.currentResult}.\nJenkins Build Number: ${Build_Number}", 
                cc: 'manojkumar.r@thesmartq.com', 
                from: 'pipeline-pantry@thesmartq.com', 
                replyTo: '', 
                subject: "Build Status# ${currentBuild.currentResult}", 
                to: 'yashwanth.kp@thesmartq.com'
		   }
	   }
    }     
}
