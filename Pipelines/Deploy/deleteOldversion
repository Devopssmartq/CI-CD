/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
import groovy.transform.Field
@Field def ARR_VERIFY_SERVICE = []

properties([
    parameters([
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            //referencedParameters: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return [options]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def options = ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "sqpentest", "sqinternational-cicd", "smartqdemo:selected",
                                        "sqpreprod-india", "sqpreprod-uk", "sqpreprod-us", "sqpreprod-spain", "sqpreprod-de", "sqpreprod-au", "sqpreprod-hk", "sqpreprod-jp", "sqpreprod-sng", "sqpreprod-nz",
                                        "smartqprd-au", "smartqprd-be", "smartqprd-chi", "smartqprd-cn", "smartqprd-de", "smartqprd-fi", "smartqprd-hk",
                                        "smartqprd-ie",  "smartqprd-india", "smartqprd-it", "smartqprd-jp", "smartqprd-mex", "smartqprd-nl", "smartqprd-nz", "smartqprd-sng", "smartqprd-spain",  "smartqprd-uae",
                                        "smartqprd-uk", "smartqprd-us"]
                                    
                        return options
                    '''
                ]
            ]
        ],
        [$class: 'ChoiceParameter',
            choiceType: 'PT_RADIO',
            description: 'Select Deployment Type',
            filterLength: 1,
            filterable: false,
            name: 'DEPLOYMENT_TYPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["India:selected", "International"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def choices = ["India:selected", "International"]
                        return choices
                    '''
                ]
            ]
        ]             
    ])
])
pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }
    environment {
        // Initialize a boolean flag
        INTERNATIONAL_FLAG = false
        VERSION_NUMBER = VersionNumber([
            versionNumberString: '${BUILD_DATE_FORMATTED, "yyyyMMddhhmmss"}', 
            //versionPrefix: 'v1.0.', 
            worstResultForIncrement: 'SUCCESS'
        ])
    }
    stages {
        stage('Set GCloud ProjectID') {
            steps {
                container('gcloud') {
                    echo "Selected APP_ENGINE_PROJECT_ID: ${params.APP_ENGINE_PROJECT_ID}"
                    sh "gcloud config set project ${params.APP_ENGINE_PROJECT_ID}"
                }               
            }  
        } 
        stage('checking version') {
            steps {
                script {
                    container('gcloud'){
                        def overallVersionCount = sh(script: 'gcloud app versions list --sort-by="LAST_DEPLOYED" --format="csv[no-heading](id)" | wc -l', returnStdout: true).trim().toInteger()
                        echo "Overall Number of Versions: ${overallVersionCount}"

                        if (overallVersionCount > 180) {
                            def type = DEPLOYMENT_TYPE ?: "India" // Default to 'India' if not selected
                            def options = type == "India" ? 'controldesk,web-ort,foodbook-web,smartq-pwa,default,backgroundtasks,taskqservice,reports,bqreports,dashboard,sso,app,pricebook' :
                                                            'controldesk,web-ort,time2eat,time2eat-flutter,baweb,appservice,backgroundtasks,taskqservice,bqreports,dashboard,sso,default,integration,time2eat-flutter,pricebook,cloud_run,index'

                            def services = options.split(',')

                            services.each { service ->
                                echo "Checking version for service: $service"
                                def serviceVersionCount = sh(script: "gcloud app versions list --service=$service --sort-by=LAST_DEPLOYED --format=\"csv[no-heading](id)\" | wc -l", returnStdout: true).trim().toInteger()
                             
                                echo "Number of versions for $service: $serviceVersionCount"

                                if (serviceVersionCount > 8) {
                                    echo "Listing versions for $service"
                                    def versionsList = sh(script: "gcloud app versions list --service=$service --sort-by=LAST_DEPLOYED --format=\"csv[no-heading](id)\" | sed '1,8d'", returnStdout: true).trim()
                                    echo "Versions for $service: $versionsList"
                                    echo "Deleting old versions for $service"
                                    versionsList.split().each { version ->
                                        sh "gcloud app versions delete $version --service=$service --quiet"
                                    }
                                }
                            }
                        }
                    }
                }    
            }
        }
    }       
}
