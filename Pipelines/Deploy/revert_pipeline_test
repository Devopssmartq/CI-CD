properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select Release Scope',
            filterLength: 1,
            filterable: false,
            name: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["sprint:selected", "preprod", "beta", "prod", "hot-fix"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        def choices = ["sprint:selected", "preprod", "beta", "prod", "hot-fix"]
                        return choices
                    '''
                ]
            ]
        ],
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select Region',
            filterLength: 1,
            filterable: false,
            name: 'Region_Selection',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["India_region:selected", "UK_region", "Global_Region"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        def choices = ["India_Region:selected", "UK_Region", "Global_Region"]
                        return choices
                    '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            referencedParameters: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "sqpentest", "sqinternational-cicd", "smartqdemo:selected"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        def scope = RELEASE_SCOPE ?: "sprint" // Default to 'SPRINT' if not selected
                        def options = []
                        if (scope == "sprint") {
                            options = ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "sqpentest", "sqinternational-cicd", "smartqdemo:selected"]
                        } else if (scope == "preprod") {
                            options = ["sqpreprod-india", "sqpreprod-uk", "sqpreprod-us:selected", "sqpreprod-spain", "sqpreprod-de", "sqpreprod-au", "sqpreprod-hk", "sqpreprod-jp", "sqpreprod-sng", "sqpreprod-nz"]
                        } else if (scope == "beta") {
                            options = ["smartqprd-india", "smartqprd-uk", "smartqprd-us:selected"]
                        } else if (scope == "prod") {
                            options = [ "smartqprd-au", "smartqprd-be", "smartqprd-chi", "smartqprd-cn", "smartqprd-de", "smartqprd-fi", "smartqprd-hk", "smartqprd-ie", "smartqprd-india", "smartqprd-ph", 
                                        "smartqprd-it", "smartqprd-jp", "smartqprd-mex", "smartqprd-nl",  "smartqprd-nz", "smartqprd-sng", "smartqprd-spain", "smartqprd-uae", "smartqprd-uk", "smartqprd-us:selected", "smartqprd-se
                        } else if (scope == "hot-fix") {
                            options = [ "sqpreprod-india", "sqpreprod-uk", "sqpreprod-us:selected", "sqpreprod-spain", "sqpreprod-de", "sqpreprod-au", "sqpreprod-hk", "sqpreprod-jp", "sqpreprod-sng", "sqpreprod-nz",
                                        "smartqprd-au", "smartqprd-be", "smartqprd-chi", "smartqprd-cn", "smartqprd-de", "smartqprd-fi", "smartqprd-hk",
                                        "smartqprd-ie",  "smartqprd-india", "smartqprd-it", "smartqprd-jp", "smartqprd-mex", "smartqprd-nl", "smartqprd-nz", "smartqprd-sng", "smartqprd-spain",  "smartqprd-uae",
                                        "smartqprd-uk", "smartqprd-us", "smartqprd-ph", "smartqprd-se
                        }
                        return options
                    '''
                ]
            ]
        ],
        [$class: 'ChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select Services to Revert',
            filterLength: 1,
            filterable: true,
            name: 'SERVICES_TO_REVERT',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["all:selected","controldesk","web-ort","time2eat","time2eat-flutter","baweb","baweb-flutter","appservice","backgroundtasks","taskqservice","bqreports","dashboard","sso","py3_default","integration", "pricebook","cloud_run","index","phrase"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        def choices = ["all:selected","controldesk","web-ort","time2eat","time2eat-flutter","baweb","baweb-flutter","appservice","backgroundtasks","taskqservice","bqreports","dashboard","sso","py3_default","integration", "pricebook","cloud_run","index","phrase"]
                        return choices
                    '''
                ]
            ]
        ],
        string(name: 'MIGRATE_TRAFFIC', defaultValue: '', description: 'Enter the txt file'),
    ])
])

   
pipeline{
    agent{
        kubernetes{
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }
    environment {
        // Initialize a boolean flag
        INTERNATIONAL_FLAG = false
        VERSION_NUMBER = VersionNumber([
            versionNumberString: '${BUILD_DATE_FORMATTED, "yyyyMMddhhmmss"}', 
            //versionPrefix: 'v1.0.', 
            worstResultForIncrement: 'SUCCESS'
        ])
    }
    stages {
        stage ('Set the Gcloud_ProjectID'){
            steps{
                container('gcloud') {
                    echo "Selected APP_ENGINE_PROJECT_ID: ${params.APP_ENGINE_PROJECT_ID}"
                    sh "gcloud config set project ${params.APP_ENGINE_PROJECT_ID}"
                }
            }
        }
        stage('Migrate_the_traffic') {
            steps {
                container('gcloud') {
                    script {
                        def project_id = "${params.APP_ENGINE_PROJECT_ID}"
                        echo "Project ID = ${project_id}"
                        // Download the file from Google Cloud Storage
                        sh "gcloud storage cp gs://sqinternational-cicd.appspot.com/${params.Region_Selection}/release_summary/released/${params.APP_ENGINE_PROJECT_ID}/${MIGRATE_TRAFFIC} ${WORKSPACE}/releasedfile --recursive"
                        sh "ls"
        
                        def inputFile = 'releasedfile'
                        // Read lines from the input file
                        def lines = readFile(inputFile).split('\n')
                        def content = lines.join('\n')
                        println(content)
        
                        def servicePreviousVersions = []
                        def selectedServices = params.SERVICES_TO_REVERT ? params.SERVICES_TO_REVERT.tokenize(',') : []
                        
                        // Check if "all" is selected
                        boolean revertAll = selectedServices.contains("all")
                        
                        echo "Services selected for reversion: ${revertAll ? 'ALL SERVICES' : selectedServices}"
                        
                        lines.each { line ->
                            // Remove square brackets and split by comma followed by space
                            def keyValuePairs = line.replaceAll("[\\[\\]]", "").split(', ')
        
                            def params = [:]
        
                            // Iterate through the key-value pairs and split by ':'
                            keyValuePairs.each { pair ->
                                def parts = pair.split(':')
                                if (parts.size() == 2) {  // Check to avoid ArrayIndexOutOfBoundsException
                                    params[parts[0].trim()] = parts[1].trim()
                                } else {
                                    println("Invalid key-value pair format: $pair")
                                }
                            }
        
                            // Extract service name and previous version
                            def service_name = params['service_name']
                            def previous_version = params['previous_version']
        
                            if (service_name && previous_version) {
                                // Check if we should process this service
                                def shouldProcess = revertAll || selectedServices.contains(service_name)
                                
                                if (shouldProcess) {
                                    echo "Processing service: ${service_name}"
                                    // Add service and previous version to the list
                                    servicePreviousVersions.add("service_name: $service_name, previous_version: $previous_version")
            
                                    // Check if service name contains 'cloud_run'
                                    if (service_name.contains("cloud_run")) {
                                        // Run the two gcloud commands
                                        def region = sh(script: "gcloud run services list --format=\"table(NAME,REGION)\" --filter=\"metadata.name=bigquerysync-${project_id}\" --project=${project_id} | head -n 2 | tail -1 | awk '{print \$2}'", returnStdout: true).trim()
                                        echo "region = ${region}"
            
                                        sh "gcloud run services update-traffic bigquerysync-${project_id} --region ${region} --to-revisions ${previous_version}=100"
                                    } else {
                                        // If not a cloud_run service, handle as normal
                                        sh "gcloud app services set-traffic ${service_name} --splits ${previous_version}=1 --project=${APP_ENGINE_PROJECT_ID} --quiet"
                                    }
                                } else {
                                    echo "Skipping service: ${service_name} (not selected for reversion)"
                                }
                            } else {
                                println("Invalid line format: $line")
                            }
                        }
        
                        // Write the list of services and versions to a file
                        def filePath = "${env.WORKSPACE}/revert_traffic-${env.VERSION_NUMBER}.txt"
                        def list = servicePreviousVersions.join('\n')
                        writeFile(file: filePath, text: list)
                        echo "Reverted services written to ${filePath}"
        
                        // Copy the result file to GCP Storage
                        sh "gcloud storage cp ${filePath} gs://sqinternational-cicd.appspot.com/${params.Region_Selection}/release_summary/revert_traffic/${APP_ENGINE_PROJECT_ID}/${env.VERSION_NUMBER} --recursive"
                    }
                }
            }
        }
    }
}