import groovy.transform.Field
@Field def ARR_VERIFY_SERVICE = []

properties([
    parameters([
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["All:Selected", "smartqprd-demo", "smartqprd-india"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        return ["All:Selected", "smartqprd-demo", "smartqprd-india"]
                    '''
                ]
            ]
        ]       
    ])
])

def copyFiles(selectedProject) {
    dir('dummy-script-jenkins/configs') {
        sh 'ls' 
        sh "cp dagconfig-${selectedProject}.py ${WORKSPACE}/data/tempdir"
        sh 'ls ${WORKSPACE}/data/tempdir' 
    }

    dir('dummy-script-jenkins/dags') {
        sh 'ls' 
        sh 'cp temp_dag.py ${WORKSPACE}/data/tempdir'
        sh 'pwd'
    }
}
def zipFiles(selectedProject) {
	container('zip'){
		dir('tempdir') {
			sh 'ls'
			sh "mv dagconfig-${selectedProject}.py dagconfig.py"
			sh "zip -r dagconfig-${selectedProject}.zip *"
		}
	}	
}

def uploadFiles(selectedProject) {
    container('gcloud'){
        dir('tempdir') {
            sh "gcloud storage cp dagconfig-${selectedProject}.zip gs://us-central1-poc-c8c39e18-bucket/dags/ --recursive"
            sh "rm *"
        }
    }    
}

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jnlp'
            yaml '''
                apiVersion: v1
                kind: Pod
                environment:
                    name: "NODE_OPTIONS"
                    value: "--max-old-space-size=4096"
                spec:
                  containers:
                  - name: jnlp  
                    resources:
                      requests:
                        memory: "2048Mi"
                        cpu: "500m"
                      limits:
                        memory: "4096Mi"
                        cpu: "1000m"
                  - name: gcloud
                    image: google/cloud-sdk:latest
                    command:
                    - cat
                    tty: true
                  - name: zip
                    image: joshkeegan/zip:latest
                    command:
                    - cat
                    tty: true    
            '''        
        }
    }
    
    stages {
        stage('Checkout') {
            steps {
                sh "mkdir -p data"
                dir('data') {
                    checkout([$class: 'GitSCM', 
                        branches: [[name: "feature/deployment-using-jenkins"]], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [[$class: 'CleanCheckout']], 
                        userRemoteConfigs: [[url: 'https://yash123devops@bitbucket.org/bottlelabtech/data-pipeline.git', credentialsId: 'bitbucket api',]]])
                        
                    sh 'ls -lrt'
                }
            }            
        }

        stage('Copy and Zip') {
            steps { 
                script {
                    def selectedProjects = params.APP_ENGINE_PROJECT_ID
                    if (selectedProjects.contains("All:Selected")) {
                        selectedProjects = ["smartqprd-demo", "smartqprd-india"]
                        ARR_VERIFY_SERVICE = selectedProjects
                    }
                    else {
                        ARR_VERIFY_SERVICE = [selectedProjects]
                    }

                    dir('data') {
                        sh "mkdir tempdir"
                        sh 'ls -lrt'

                        for (selectedProject in ARR_VERIFY_SERVICE) {
                            echo "Processing project: ${selectedProject}"
                            copyFiles(selectedProject)
                            zipFiles(selectedProject)
                            uploadFiles(selectedProject)
                        }
                    }
                }  
            }            
        }
    }
}
