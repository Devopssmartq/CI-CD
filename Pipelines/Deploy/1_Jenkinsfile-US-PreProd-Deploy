/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"
                
          - name: nodejs
            image: node:18-alpine
            command:
            - cat
            tty: true

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }

    environment {
        APP_ENGINE_PROJECT_ID = 'sqpreprod-us'
        GCS_BUCKET_NAME = 'sqinternational-cicd.appspot.com'
        ENVIRONMENT = 'MASTER'        
        
        //GOOGLE_APPLICATION_CREDENTIALS = credentials('gcloud-creds')
        GLOBAL_COUNT = '0'
        CONTROLDESK_APP_ENGINE_VERSION = '20230821-2'
        TIME2EAT_APP_ENGINE_VERSION = '20230821-4'
        //BAWEB_APP_ENGINE_VERSION = 'baweb-v1'
        WEBORT_APP_ENGINE_VERSION = '20230821-2'

        APPSERVICE_APP_ENGINE_VERSION = '20230822-1'
        BACKGROUND_APP_ENGINE_VERSION = '20230822-1'
        TASKQSERVICE_APP_ENGINE_VERSION = '20230822-1'
        BQREPORTS_APP_ENGINE_VERSION = '20230821-2'

        DEFAULT_APP_ENGINE_VERSION = '20230822-3'
        DASHBOARD_APP_ENGINE_VERSION = '20230822-3'
        //SSO_APP_ENGINE_VERSION = '20230822-3'
    }
   
    stages {  
        stage('Deploy NodeJS Apps') {
            steps {
                parallel (
                    controldesk: {
                            container('gcloud') {
                                script {
                                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                    def APP_NAME = "controldesk"
                                    sh "mkdir -p ${APP_NAME}-latest"                                
                                    echo "current workspace: ${WORKSPACE}"                                    
                                    def STORAGE_OBJECT_SOURCE_PATH = sh (
                                        script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                        returnStdout: true
                                    ).trim()
                                    echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                    
                                    CONTROLDESK_APP_ENGINE_VERSION = sh (
                                            script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                            returnStdout: true
                                        ).trim()

                                    CONTROLDESK_APP_ENGINE_VERSION = "${CONTROLDESK_APP_ENGINE_VERSION}".split('@')[1]

                                    echo "App Engine Version: ${CONTROLDESK_APP_ENGINE_VERSION}"

                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest/ --recursive"
                                    
                                    def YAML = 'app.yaml'
                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$CONTROLDESK_APP_ENGINE_VERSION --quiet $YAML --no-promote"
                                    }                                    
                                }
                            }
                        },
                    time2eat: {
                        container('gcloud') {                           
                            script {
                                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"

                                    def APP_NAME = "time2eat"
                                    sh "mkdir -p ${APP_NAME}-latest"                                
                                    echo "current workspace: ${WORKSPACE}/${APP_NAME}"
                                   
                                    def STORAGE_OBJECT_SOURCE_PATH = sh (
                                        script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                        returnStdout: true
                                    ).trim()
                                    echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                    
                                    TIME2EAT_APP_ENGINE_VERSION = sh (
                                            script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                            returnStdout: true
                                        ).trim()

                                    TIME2EAT_APP_ENGINE_VERSION = "${TIME2EAT_APP_ENGINE_VERSION}".split('@')[1]
                                    echo "App Engine Version: ${TIME2EAT_APP_ENGINE_VERSION}"

                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                    
                                    def YAML1 = 'time2eat.yaml'
                                    def YAML2 = 'baweb.yaml'

                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet ${YAML1} --no-promote"
                                        sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet ${YAML2} --no-promote"
                                    }                                    
                            }
                        }
                    },
                    webORT: {
                        container('gcloud') {                            
                            script {
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                def APP_NAME = "web-ort"
                                sh "mkdir -p ${APP_NAME}-latest"                                
                                echo "current workspace: ${WORKSPACE}/${APP_NAME}"
                               
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                    
                                WEBORT_APP_ENGINE_VERSION = sh (
                                            script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                            returnStdout: true
                                        ).trim()

                                WEBORT_APP_ENGINE_VERSION = "${WEBORT_APP_ENGINE_VERSION}".split('@')[1]

                                echo "App Engine Version: ${WEBORT_APP_ENGINE_VERSION}"

                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                
                                def YAML = 'app.yaml'   
                                dir("${APP_NAME}-latest") {
                                    sh "gcloud app deploy --version=$WEBORT_APP_ENGINE_VERSION --quiet $YAML --no-promote"
                                }                                            
                            }
                        }
                    }
                ) 
            }
        }
       
        stage('Clone smartq-backend') { 
            steps { 
                sh "mkdir -p smartq-cloud-backend"
                dir('smartq-cloud-backend') {                        
                    git branch: 'preprodindia',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/smartq-cloud-backend.git'

                dir ('py3_project/py3_backend/bqreports/admindashboard/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('py3_project/py3_backend/bqreports/reports/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('eWallet'){
                        sh 'rm -rf ./{*,.*}'
                    }     
                sh 'ls -lrt'
                }
            } 
        }
        stage('copy build output - ewallet, admin & vendor dash-board') {
            steps {                
                dir ('smartq-cloud-backend') {
                    container('gcloud') {
                        sh "echo ${WORKSPACE}"
                        sh "gcloud config set project $APP_ENGINE_PROJECT_ID"

                        //sh 'gcloud storage cp gs://sqinternational-cicd.appspot.com/$ENVIRONMENT/generic-admin-dashboard/generic-admin-dashboard-Latest/* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive'
                                                
                        script {  
                                def APP_NAME = "generic-admin-dashboard" 
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive"
                        }
                        
                        //sh 'gcloud storage cp gs://sqinternational-cicd.appspot.com/$ENVIRONMENT/vendor-dashboard/vendor-dashboard-Latest/* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive'

                        script {  
                                def APP_NAME = "vendor-dashboard" 
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive"
                        }

                        //sh 'gcloud storage cp gs://sqinternational-cicd.appspot.com/$ENVIRONMENT/ewallet/ewallet-Latest/* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive'
                        script {  
                                def APP_NAME = "ewallet" 
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive"
                        }        

                        dir ('py3_project/py3_backend/bqreports/admindashboard') {
                            sh 'ls -lrt'
                        }
                        dir ('py3_project/py3_backend/bqreports/reports') {
                            sh 'ls -lrt'
                        }
                        dir ('eWallet') {
                            sh 'ls -lrt'
                        }
                    }
                }
            }
        }
        stage('Deploy Smartq Backend') {
            steps {
                parallel (
                    appservice: {
                        container('gcloud') {
                            sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                            script { 
                                    def APP_NAME = "ewallet" 
                                    def STORAGE_OBJECT_SOURCE_PATH = sh (
                                            script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                            returnStdout: true
                                        ).trim()
                                        echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                        
                                    APPSERVICE_APP_ENGINE_VERSION = sh (
                                                script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                                returnStdout: true
                                            ).trim()
                               
                                    APPSERVICE_APP_ENGINE_VERSION = "${APPSERVICE_APP_ENGINE_VERSION}".split('@')[1]

                                    echo "App Engine Version: $APPSERVICE_APP_ENGINE_VERSION"

                                    dir ('smartq-cloud-backend'){
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$APPSERVICE_APP_ENGINE_VERSION --quiet time2eat_appservice.yaml --no-promote"
                                    }
                                }                                
                            }
                        },
                    backgroundtasks: {
                        container('gcloud') {
                            sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                            script {
                                def APP_NAME = "smartq-cloud-backend" 
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                            script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                            returnStdout: true
                                        ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                        
                                BACKGROUND_APP_ENGINE_VERSION = sh (
                                                script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                                returnStdout: true
                                            ).trim()

                                BACKGROUND_APP_ENGINE_VERSION = "${BACKGROUND_APP_ENGINE_VERSION}".split('@')[1]

                                echo "App Engine Version: $BACKGROUND_APP_ENGINE_VERSION"
                                dir ('smartq-cloud-backend') {
                                    sh "gcloud app deploy --version=$BACKGROUND_APP_ENGINE_VERSION --quiet background.yaml --no-promote"
                                }
                                
                            }               
                        }
                    },
                    taskqservice: {
                        container('gcloud') {
                            sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                            script {
                                def APP_NAME = "smartq-cloud-backend" 
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                            script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                            returnStdout: true
                                        ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                        
                                TASKQSERVICE_APP_ENGINE_VERSION = sh (
                                                script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                                returnStdout: true
                                            ).trim()

                                TASKQSERVICE_APP_ENGINE_VERSION = "${TASKQSERVICE_APP_ENGINE_VERSION}".split('@')[1]

                                echo "App Engine Version: $TASKQSERVICE_APP_ENGINE_VERSION"
                                dir ('smartq-cloud-backend'){
                                    sh "gcloud app deploy --version=$TASKQSERVICE_APP_ENGINE_VERSION --quiet taskqservice.yaml --no-promote"
                                }                                                           
                                    
                            }      
                        }
                    }   
                )
            }
        }
        stage('Deploy to BQ Reports') {
            steps {
                container('gcloud') {
                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                    script {
                        def APP_NAME = "vendor-dashboard" 
                        def STORAGE_OBJECT_SOURCE_PATH = sh (
                            script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                            returnStdout: true
                        ).trim()
                        echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                        
                        BQREPORTS_APP_ENGINE_VERSION = sh (
                            script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                            returnStdout: true
                        ).trim()                        

                        BQREPORTS_APP_ENGINE_VERSION = "${BQREPORTS_APP_ENGINE_VERSION}".split('@')[1]

                        echo "App Engine Version: $BQREPORTS_APP_ENGINE_VERSION"

                        dir ('smartq-cloud-backend') {
                            dir ('py3_project') {
                                sh "ls *.yaml"
                                sh "gcloud app deploy --version=$BQREPORTS_APP_ENGINE_VERSION --quiet bqreports.yaml --no-promote"
                            }
                        }                        
                    }
                }               
            }
        }
        stage('Clone sq_microservices_backend') { 
            steps { 
                sh "mkdir -p sq_microservices_backend"
                dir('sq_microservices_backend') {                        
                    git branch: 'preprodsetup',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/sq_microservices_backend.git'
                                   
                sh 'ls -lrt'
                }
            } 
        }
        stage('Deploy Microservices') {
            steps {
                parallel (
                    appms: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"
                            sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                            script {                                        
                                def APP_NAME = "sq_microservices_backend" 
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                                
                                DEFAULT_APP_ENGINE_VERSION = sh (
                                    script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                    returnStdout: true
                                ).trim()                        

                                DEFAULT_APP_ENGINE_VERSION = "${DEFAULT_APP_ENGINE_VERSION}".split('@')[1]

                                echo "App Engine Version: $DEFAULT_APP_ENGINE_VERSION"
                                
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib appms'
                                    dir ('appms') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$DEFAULT_APP_ENGINE_VERSION --quiet sqpreprod-us.yaml --no-promote"
                                    }
                                }                                
                            }
                        } 
                    },
                    dashboardms: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"
                            sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                            script {
                                def APP_NAME = "sq_microservices_backend" 
                                def STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                                
                                DASHBOARD_APP_ENGINE_VERSION = sh (
                                    script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                                    returnStdout: true
                                ).trim()                        

                                DASHBOARD_APP_ENGINE_VERSION = "${DASHBOARD_APP_ENGINE_VERSION}".split('@')[1]
                                
                                echo "App Engine Version: $DASHBOARD_APP_ENGINE_VERSION"
                                
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib dashboardms'
                                    dir ('dashboardms') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$DASHBOARD_APP_ENGINE_VERSION --quiet sqpreprod-us.yaml --no-promote"
                                    }                                  
                                }                              
                                
                            }
                        }
                    },
                    // sso_flex: {
                    //     container('gcloud') {
                    //         sh "echo ${WORKSPACE}"
                    //         sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                    //         script {
                    //             def APP_NAME = "sq_microservices_backend" 
                    //             def STORAGE_OBJECT_SOURCE_PATH = sh (
                    //                     script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                    //                     returnStdout: true
                    //                 ).trim()
                    //             echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                                
                    //             SSO_APP_ENGINE_VERSION = sh (
                    //                 script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                    //                 returnStdout: true
                    //             ).trim()                        

                    //             SSO_APP_ENGINE_VERSION = "${SSO_APP_ENGINE_VERSION}".split('@')[1]                            
                    //             echo "App Engine Version: $SSO_APP_ENGINE_VERSION"

                    //             dir ('sq_microservices_backend') {
                    //                 sh 'cp -r commonlib sso_flex'
                    //                 dir ('sso_flex') {
                    //                     sh "ls *.yaml"
                    //                     sh "gcloud app deploy --version=$SSO_APP_ENGINE_VERSION --quiet app.yaml --no-promote"
                    //                 }
                    //             }                   
                    //            }
                    //         }
                    //     }              
                )
            }
        }
        stage ('URL Status')  {
            steps {
                container('gcloud') {
                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                    script { 
                                    def service_url1 = sh (
                                        script: "gcloud app browse --service=controldesk --version=$CONTROLDESK_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                        returnStdout: true
                                    ).trim()
                                    echo "Service URL: ${service_url1}"

                                    def CHECK_URL_STATUS1 = "curl --write-out %{http_code} --silent --output /dev/null '${service_url1}/control-desk/login'"
                                    sh "${CHECK_URL_STATUS1} > commandResult"
                                    env.status = readFile('commandResult').trim()
                                    sh "echo ${env.status}"  

                                    if (env.status == "200") {
                                        GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                        echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                        //sh "gcloud app services set-traffic $APP_NAME --splits $CONTROLDESK_APP_ENGINE_VERSION=1 --quiet"
                                    }
                                    else {  
                                        echo "Failed with Status Code : ${env.status}"
                                    }                        

                        def service_url2 = sh (
                            script: "gcloud app browse --service='time2eat' --version=$TIME2EAT_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                            returnStdout: true
                        ).trim()

                        echo "Service URL: ${service_url2}"

                        def CHECK_URL_STATUS2 = "curl --write-out %{http_code} --silent --output /dev/null '${service_url2}/time2eat/main'"
                        sh "${CHECK_URL_STATUS2} > commandResult"
                        env.status = readFile('commandResult').trim()
                        sh "echo ${env.status}"  

                        if (env.status == "200") {
                            GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                            echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                            //sh "gcloud app services set-traffic $APP_NAME --splits $TIME2EAT_APP_ENGINE_VERSION=1 --quiet"
                        }
                        else {  
                            echo "Failed with Status Code : ${env.status}"
                        }

                        def service_url3 = sh (
                                script: "gcloud app browse --service='baweb' --version=$TIME2EAT_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                returnStdout: true
                            ).trim()

                            echo "Service URL: ${service_url3}"
                            def CHECK_URL_STATUS3 = "curl --write-out %{http_code} --silent --output /dev/null '${service_url3}/baweb/main'"
                            sh "${CHECK_URL_STATUS3} > commandResult"
                            env.status = readFile('commandResult').trim()
                            sh "echo ${env.status}"  

                            if (env.status == "200") {
                                GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                echo "Global count : ${GLOBAL_COUNT} of 11"                                    
                                //sh "gcloud app services set-traffic 'baweb' --splits $BAWEB_APP_ENGINE_VERSION=1 --quiet"
                            }
                            else {  
                                echo "Failed with Status Code : ${env.status}"
                            }

                        def service_url4 = sh (
                                        script: "gcloud app browse --service=web-ort --version=$WEBORT_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                        returnStdout: true
                                    ).trim()

                                echo "Service URL: ${service_url4}"

                                def CHECK_URL_STATUS4 = "curl --write-out %{http_code} --silent --output /dev/null '${service_url4}/web-ort/main'"
                                sh "${CHECK_URL_STATUS4} > commandResult"
                                env.status = readFile('commandResult').trim()
                                sh "echo ${env.status}"  

                                if (env.status == "200") {
                                    GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                    echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                    //sh "gcloud app services set-traffic $APP_NAME --splits $WEBORT_APP_ENGINE_VERSION=1 --quiet"
                                }
                                else {  
                                    echo "Failed with Status Code : ${env.status}"
                                }
                        def service_url5 = sh (
                                        script: "gcloud app browse --service='appservice' --version=$APPSERVICE_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                        returnStdout: true
                                    ).trim()
                                    echo "Service URL: ${service_url5}"

                                    def CHECK_URL_STATUS5 = "curl --retry 4 -f --retry-all-errors --retry-delay 5 --write-out %{http_code} --silent --output /dev/null '${service_url5}/eWallet/transactions'"
                                    sh "${CHECK_URL_STATUS5} > commandResult"
                                    env.status = readFile('commandResult').trim()
                                    sh "echo ${env.status}"  

                                    if (env.status == "200") {
                                        GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                        echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                        //sh "gcloud app services set-traffic 'appservice' --splits $APPSERVICE_APP_ENGINE_VERSION=1 --quiet"
                                    }
                                    else {  
                                        echo "Failed with Status Code : ${env.status}"
                                    }
                            def service_url6 = sh (
                                        script: "gcloud app browse --service='backgroundtasks' --version=$BACKGROUND_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                        returnStdout: true
                                    ).trim()
                                    echo "Service URL: ${service_url6}"

                                    def CHECK_URL_STATUS6 = "curl --retry 4 -f --retry-all-errors --retry-delay 5 --write-out %{http_code} --silent --output /dev/null '${service_url6}/dummycheckupload'"
                                    sh "${CHECK_URL_STATUS6} > commandResult_background"
                                    env.status = readFile('commandResult_background').trim()
                                    sh "echo ${env.status}"  

                                    if (env.status == "200") {
                                        GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                        echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                        //sh "gcloud app services set-traffic 'backgroundtasks' --splits $BACKGROUND_APP_ENGINE_VERSION=1 --quiet"
                                    }
                                    else {  
                                        echo "Failed with Status Code : ${env.status}"
                                    } 
                        def service_url7 = sh (
                                        script: "gcloud app browse --service='taskqservice' --version=$TASKQSERVICE_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                        returnStdout: true
                                    ).trim()
                                    echo "Service URL: ${service_url7}"

                                    def CHECK_URL_STATUS7 = "curl --retry 4 -f --retry-all-errors --retry-delay 5 --write-out %{http_code} --silent --output /dev/null '${service_url7}/dummycheckupload'"
                                    sh "${CHECK_URL_STATUS7} > commandResult_taskq"
                                    env.status = readFile('commandResult_taskq').trim()
                                    sh "echo ${env.status}"  

                                    if (env.status == "200") {
                                        GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                        echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                        //sh "gcloud app services set-traffic 'taskqservice' --splits $TASKQSERVICE_APP_ENGINE_VERSION=1 --quiet"
                                    }
                                    else {  
                                        echo "Failed with Status Code : ${env.status}"
                                    }

                        def service_url8 = sh (
                            script: "gcloud app browse --service='bqreports' --version=$BQREPORTS_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                            returnStdout: true
                        ).trim()
                        echo "Service URL: ${service_url8}"

                        def CHECK_URL_STATUS8 = "curl --retry 4 -f --retry-all-errors --retry-delay 5 --write-out %{http_code} --silent --output /dev/null '${service_url8}'"
                        sh "${CHECK_URL_STATUS8} > commandResult"
                        env.status = readFile('commandResult').trim()
                        sh "echo ${env.status}"  

                        if (env.status == "200") {
                            GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                            echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                            //sh "gcloud app services set-traffic 'bqreports' --splits $BQREPORTS_APP_ENGINE_VERSION=1 --quiet"
                        }
                        else {  
                            echo "Failed with Status Code : ${env.status}"
                        }

                    def service_url9 = sh (
                                        script: "gcloud app browse --service='default' --version=$DEFAULT_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                        returnStdout: true
                                ).trim()
                                echo "Service URL: ${service_url9}"

                                def CHECK_URL_STATUS9 = "curl --write-out %{http_code} --silent --output /dev/null '${service_url9}'"
                                sh "${CHECK_URL_STATUS9} > commandResult"
                                env.status = readFile('commandResult').trim()
                                sh "echo ${env.status}"  

                                if (env.status == "200") {
                                        GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                        echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                        //sh "gcloud app services set-traffic 'default' --splits $DEFAULT_APP_ENGINE_VERSION=1 --quiet"
                                }
                                else {  
                                        echo "Failed with Status Code : ${env.status}"
                                }

                        def service_url10 = sh (
                                        script: "gcloud app browse --service='dashboard' --version=$DASHBOARD_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                        returnStdout: true
                                ).trim()
                                echo "Service URL: ${service_url10}"

                                def CHECK_URL_STATUS10 = "curl --write-out %{http_code} --silent --output /dev/null '${service_url10}/v2/bck/dummy'"
                                sh "${CHECK_URL_STATUS10} > commandResult"
                                env.status = readFile('commandResult').trim()
                                sh "echo ${env.status}"  

                                if (env.status == "200") {
                                    GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                    echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                    //sh "gcloud app services set-traffic 'dashboard' --splits $DASHBOARD_APP_ENGINE_VERSION=1 --quiet"
                                }
                                else {  
                                    echo "Failed with Status Code : ${env.status}"
                                }

                                // def service_url11 = sh (
                                //     script: "gcloud app browse --service='sso' --version=$SSO_APP_ENGINE_VERSION --no-launch-browser --format='value(url)'",
                                //     returnStdout: true
                                // ).trim()
                                // echo "Service URL: ${service_url11}"

                                // def CHECK_URL_STATUS11 = "curl --write-out %{http_code} --silent --output /dev/null '${service_url11}'"
                                // sh "${CHECK_URL_STATUS11} > commandResult"
                                // env.status = readFile('commandResult').trim()
                                // sh "echo ${env.status}"  

                                // if (env.status == "200") {
                                //     GLOBAL_COUNT = (GLOBAL_COUNT.toInteger() + 1).toString()
                                //     echo "Global count : ${GLOBAL_COUNT} of 11"                                   
                                //     //sh "gcloud app services set-traffic 'sso' --splits $SSO_APP_ENGINE_VERSION=1 --quiet"
                                // }
                                // else {  
                                //     echo "Failed with Status Code : ${env.status}"
                                // }                   
                    }
                }
             }
        }
       
        stage('Promote') {
           steps {
                container('gcloud') {
                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                    script { 
                        env.count = GLOBAL_COUNT.toInteger().toString()
                        echo "Global count : ${env.count}"                  
                        if (env.count == "10") { //11, enable sso
                            echo "Start Promoting.."  
                            echo "migrating traffic to $CONTROLDESK_APP_ENGINE_VERSION of controldesk"
                            sh "gcloud app services set-traffic 'controldesk' --splits $CONTROLDESK_APP_ENGINE_VERSION=1 --quiet" 
                            echo "migrating traffic to $TIME2EAT_APP_ENGINE_VERSION of time2eat"                            
                            sh "gcloud app services set-traffic 'time2eat' --splits $TIME2EAT_APP_ENGINE_VERSION=1 --quiet"
                            echo "migrating traffic to $TIME2EAT_APP_ENGINE_VERSION of baweb"
                            sh "gcloud app services set-traffic 'baweb' --splits $TIME2EAT_APP_ENGINE_VERSION=1 --quiet"
                            echo "migrating traffic to $WEBORT_APP_ENGINE_VERSION of web-ort"
                            sh "gcloud app services set-traffic 'web-ort' --splits $WEBORT_APP_ENGINE_VERSION=1 --quiet"
                            
                            echo "migrating traffic to $APPSERVICE_APP_ENGINE_VERSION of appservice"
                            sh "gcloud app services set-traffic 'appservice' --splits $APPSERVICE_APP_ENGINE_VERSION=1 --quiet"
                            echo "migrating traffic to $TASKQSERVICE_APP_ENGINE_VERSION of taskqservice"
                            sh "gcloud app services set-traffic 'taskqservice' --splits $TASKQSERVICE_APP_ENGINE_VERSION=1 --quiet"
                            echo "migrating traffic to $BACKGROUND_APP_ENGINE_VERSION of backgroundtasks"
                            sh "gcloud app services set-traffic 'backgroundtasks' --splits $BACKGROUND_APP_ENGINE_VERSION=1 --quiet"
                            echo "migrating traffic to $BQREPORTS_APP_ENGINE_VERSION of bqreports"
                            sh "gcloud app services set-traffic 'bqreports' --splits $BQREPORTS_APP_ENGINE_VERSION=1 --quiet"

                            echo "migrating traffic to $DEFAULT_APP_ENGINE_VERSION of default service"
                            sh "gcloud app services set-traffic 'default' --splits $DEFAULT_APP_ENGINE_VERSION=1 --quiet"
                            echo "migrating traffic to $DASHBOARD_APP_ENGINE_VERSION of dashboard service"
                            sh "gcloud app services set-traffic 'dashboard' --splits $DASHBOARD_APP_ENGINE_VERSION=1 --quiet"
                            // echo "migrating traffic to $SSO_APP_ENGINE_VERSION of sso service""
                            // sh "gcloud app services set-traffic 'sso' --splits $SSO_APP_ENGINE_VERSION=1 --quiet"
                        }
                        else {  
                            echo "Promote halted.."
                        }
                   }
                }               
            }  
        }      
    } 
}