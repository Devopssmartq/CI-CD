/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"
                
          - name: nodejs
            image: node:18-alpine
            command:
            - cat
            tty: true

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }

    environment {
        APP_ENGINE_PROJECT_ID = 'sqpreprod-us'
        GCS_BUCKET_NAME = 'sqinternational-cicd.appspot.com'
        ENVIRONMENT = 'MASTER'
        APP_ENGINE_VERSION = 'v2'
        YAML = 'app.yaml'
        YAML1 = 'time2eat.yaml'
        YAML2 = 'baweb.yaml'
        //GOOGLE_APPLICATION_CREDENTIALS = credentials('gcloud-creds')
    }
   
    stages {  
        stage('Deploy NodeJS Apps') {
            steps {
                parallel (
                    controldesk: {
                            container('gcloud') {
                                script {
                                    def APP_NAME = "controldesk"
                                    sh "mkdir -p ${APP_NAME}-latest"                                
                                    echo "current workspace: ${WORKSPACE}/${APP_NAME}"
                                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                    STORAGE_OBJECT_SOURCE_PATH = sh (
                                        script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                        returnStdout: true
                                    ).trim()
                                    echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                   
                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet $YAML --no-promote"
                                    }
                                }
                            }
                        },
                    time2eat: {
                        container('gcloud') {                           
                            script {
                                    def APP_NAME = "time2eat"
                                    sh "mkdir -p ${APP_NAME}-latest"                                
                                    echo "current workspace: ${WORKSPACE}/${APP_NAME}"
                                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                    STORAGE_OBJECT_SOURCE_PATH = sh (
                                        script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                        returnStdout: true
                                    ).trim()
                                    echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                   
                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet $YAML1 --no-promote"
                                        sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet $YAML2 --no-promote"
                                    }
                            }
                        }
                    },
                    webORT: {
                        container('gcloud') {                            
                            script {
                                def APP_NAME = "web-ort"
                                sh "mkdir -p ${APP_NAME}-latest"                                
                                echo "current workspace: ${WORKSPACE}/${APP_NAME}"
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                   
                                dir("${APP_NAME}-latest") {
                                    sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet $YAML --no-promote"
                                }
                            }
                        }
                    }
                ) 
            }
        }    
        stage('Clone smartq-backend') { 
            steps { 
                sh "mkdir -p smartq-cloud-backend"
                dir('smartq-cloud-backend') {                        
                    git branch: 'preprodindia',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/smartq-cloud-backend.git'

                dir ('py3_project/py3_backend/bqreports/admindashboard/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('py3_project/py3_backend/bqreports/reports/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('eWallet'){
                        sh 'rm -rf ./{*,.*}'
                    }     
                sh 'ls -lrt'
                }
            } 
        }
        stage('copy build output - ewallet, admin & vendor dash-board') {
            steps {                
                dir ('smartq-cloud-backend') {
                    container('gcloud') {
                        sh "echo ${WORKSPACE}"
                        sh "gcloud config set project $APP_ENGINE_PROJECT_ID"

                        //sh 'gcloud storage cp gs://sqinternational-cicd.appspot.com/$ENVIRONMENT/generic-admin-dashboard/generic-admin-dashboard-Latest/* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive'
                                                
                        script {  
                                def APP_NAME = "generic-admin-dashboard" 
                                STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive"
                        }
                        
                        //sh 'gcloud storage cp gs://sqinternational-cicd.appspot.com/$ENVIRONMENT/vendor-dashboard/vendor-dashboard-Latest/* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive'

                        script {  
                                def APP_NAME = "vendor-dashboard" 
                                STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive"
                        }

                        //sh 'gcloud storage cp gs://sqinternational-cicd.appspot.com/$ENVIRONMENT/ewallet/ewallet-Latest/* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive'
                        script {  
                                def APP_NAME = "ewallet" 
                                STORAGE_OBJECT_SOURCE_PATH = sh (
                                    script: "gcloud storage ls gs://$GCS_BUCKET_NAME/$ENVIRONMENT/${APP_NAME} | sort --ignore-case -rV | head -n 1",
                                    returnStdout: true
                                ).trim()
                                echo "Storage Object Source Path: ${STORAGE_OBJECT_SOURCE_PATH}"
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive"
                        }        

                        dir ('py3_project/py3_backend/bqreports/admindashboard') {
                            sh 'ls -lrt'
                        }
                        dir ('py3_project/py3_backend/bqreports/reports') {
                            sh 'ls -lrt'
                        }
                        dir ('eWallet') {
                            sh 'ls -lrt'
                        }
                    }
                }
            }
        }
        stage('Deploy Smartq Backend') {
            steps {
                parallel (
                    time2eat: {
                            container('gcloud') {
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                dir ('smartq-cloud-backend'){
                                    sh "ls *.yaml"
                                    sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet time2eat_appservice.yaml --no-promote"
                                }
                            }
                        },
                    background: {
                            container('gcloud') {
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                dir ('smartq-cloud-backend'){
                                    sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet background.yaml --no-promote"
                                }
                            }
                        },
                    taskqservice: {
                            container('gcloud') {
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                dir ('smartq-cloud-backend'){
                                    sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet taskqservice.yaml --no-promote"
                                }
                            }
                        },
                    eWallet: {
                            container('gcloud') {
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                dir ('smartq-cloud-backend'){
                                    sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet app.yaml --no-promote"
                                }
                            }
                        }                    
                )
            }
        }
        stage('Deploy to BQ Reports') {
            steps {
                container('gcloud') {
                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                    dir ('smartq-cloud-backend') {
                        dir ('py3_project') {
                            sh "ls *.yaml"
                            sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet bqreports.yaml --no-promote"
                        }
                    }
                }               
            }
        }
        stage('Clone sq_microservices_backend') { 
            steps { 
                sh "mkdir -p sq_microservices_backend"
                dir('sq_microservices_backend') {                        
                    git branch: 'preprodsetup',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/sq_microservices_backend.git'
                                   
                sh 'ls -lrt'
                }
            } 
        }
        stage('Deploy Microservices') {
            steps {
                parallel (
                    appms: {
                            container('gcloud') {
                                sh "echo ${WORKSPACE}"
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib appms'
                                    dir ('appms') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet sqpreprod-us.yaml --no-promote"
                                    }
                                }
                            } 
                        },
                    dashboardms: {
                            container('gcloud') {
                                sh "echo ${WORKSPACE}"
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"

                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib dashboardms'
                                    dir ('dashboardms'){
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet sqpreprod-us.yaml --no-promote"
                                    }                                  
                                }
                            }
                        },
                    sso_flex: {
                            container('gcloud') {
                                sh "echo ${WORKSPACE}"
                                sh "gcloud config set project $APP_ENGINE_PROJECT_ID"

                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib sso_flex'
                                    dir ('sso_flex') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$APP_ENGINE_VERSION --quiet app.yaml --no-promote"
                                    }
                                }
                            }
                        }              
                )
            }
        }      
    }
}