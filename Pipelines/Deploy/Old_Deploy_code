/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
import groovy.transform.Field
@Field def IS_NODEAPPS_ENABLED
@Field def IS_PY2_ENABLED
@Field def IS_PY3_ENABLED
@Field def ARR_SELECTED_SERVICE
@Field def ARR_VERIFY_SERVICE = []
@Field def PROMOTED_SERVICES = []

def getURL_Status(Map args) {
    script {
        def service_url = sh(script: "gcloud app browse --service=${args.service_name} --version=${args.version_name} --no-launch-browser --format='value(url)'", returnStdout: true).trim()
        // must call trim() to remove the default trailing newline
        final status_code = sh(script: "curl --write-out %{http_code} --silent --output /dev/null '${service_url}/${args.url_suffix}'", returnStdout: true).trim()
         
        if (status_code == "200") {
            echo "Success with Status Code : ${status_code}" 
        }
        else { 
            echo "Failed with Status Code : ${status_code}" 
        }
        return status_code
    }
}
def get_Previous_Version(Map args) {
    container('gcloud') {
        try {
            //def previous_verison = ''
            // def output_status = sh ( 
            //     script:"gcloud app versions list --service='${args.service_name}' --limit=1 --format='value(VERSION.ID)' --filter='traffic_split>0'", 
            //     returnStatus: true
            // )// must call trim() to remove the default trailing newline
            // echo "output-status: ${output_status}"
            // if (output_status == 0) {
            //     previous_verison= sh ( 
            //         script:"gcloud app versions list --service='${args.service_name}' --limit=1 --format='value(VERSION.ID)' --filter='traffic_split>0'", 
            //         //returnStdout: true
            //     ).trim()
               
            // }
            
          
        }
        catch (Exception e) {
            // Handle the error gracefully, e.g., set previous_version to a default value
            //previous_version = ""
        }

        return ""
     }
}
def is_Version_Exists(Map args) {
    script {       
        def previous_verison = get_Previous_Version(service_name: "${args.service_name}")
        def new_version = get_AppEngine_Version(app_name: "${args.app_name}")
        echo "previous_verison - ${previous_verison}"
        echo "new_version - ${new_version}"   
        boolean version_Exists = (previous_verison == new_version) ? true : false
        echo "version_Exists - $version_Exists, skipping the deployment for ${args.service_name}"
        return version_Exists
    }
}
def get_Storage_Object_Source_Path(Map args) { 
    def source_path = sh (
        script: "gcloud storage ls -l 'gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name}' | sed '/TOTAL/d' | sort -k 2 -r  | head -1 | awk '{print \$3}'",
        returnStdout: true
    ).trim()
    storage_path = "${source_path}"
    echo "${source_path}"
    return "${source_path}"
}
def get_AppEngine_Version(Map args) {
    def APP_ENGINE_VERSION // Define the variable outside the container block
    
     container('gcloud') {
        def STORAGE_OBJECT_SOURCE_PATH = sh (
                script: "gcloud storage ls -l gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name} | cat | sed '/TOTAL/d' | sort -k 2 -r | head -1 | awk '{print \$3}'",
                returnStdout: true
        ).trim()                                
        APP_ENGINE_VERSION = sh (
                script: "echo ${STORAGE_OBJECT_SOURCE_PATH} | rev | cut -d'/' -f1 | rev",
                returnStdout: true
        ).trim()
        echo "App_Engine_Version for ${args.app_name} : ${APP_ENGINE_VERSION}" 
        def fileName = APP_ENGINE_VERSION.replaceAll('\\.tar\\.gz', '')
        APP_VERSION = fileName
        echo "${fileName}"
        
        return fileName
    }
}

def promote_Service(Map args) {
    def PROMOTED_SERVICE = sh (script: "gcloud app services set-traffic ${args.service_name} --splits ${args.version_name}=1 --quiet", returnStdout: true).trim()       
    return "${PROMOTED_SERVICE}"
}
def Write_To_File() {
    script {    
        def filePath = "${env.WORKSPACE}/release-${env.VERSION_NUMBER}.txt"                  
        def content = PROMOTED_SERVICES.join('\n')
        writeFile file: filePath, text: content                                            
        echo "Items written to ${filePath}"
        def data = readFile(file: "${filePath}")
        println(data)
        // container('gcloud') {
        //     dir("${env.WORKSPACE}") {
        //         sh "gcloud storage cp ${filePath} gs://sqinternational-cicd.appspot.com/release_summary/${APP_ENGINE_PROJECT_ID}/released --recursive"
        //     }
        // }
    }
}
//1. initialize the app that needs deployment
def nodeapps = [
            [key: 'controldesk'],
            [key: 'controldeskflutter'],
            [key: 'smartq-pwa'],
            [key: 'foodbook-web'],
            [key: 'time2eat'],
            [key: 'baweb'],
            [key: 'web-ort'],
            [key: 'time2eat-flutter']
        ]
def py2_services = [
            [key: 'appservice'],
            [key: 'py2_default'],//india
            [key: 'backgroundtasks'],
            [key: 'taskqservice'],
            [key: 'reports'],
            [key: 'bqreports']
        ]
def py3_services = [
            [key: 'app'],
            [key: 'py3_default'], //international           
            [key: 'dashboard'],
            [key: 'sso'],
            [key: 'pricebook'],
            [key: 'integration']
        ]
//To-Do: refactor the script blocks to use from variable definition
properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select Release Scope',
            filterLength: 1,
            filterable: false,
            name: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["sprint:selected", "preprod", "beta", "prod", "hot-fix"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def choices = ["sprint:selected", "preprod", "beta", "prod", "hot-fix"]
                        return choices
                    '''
                ]
            ]
        ],
        string(name: 'GIT_BRANCH',defaultValue: '', description: 'hotfix branch name'),
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            referencedParameters: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "smartqdemo:selected"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def scope = RELEASE_SCOPE ?: "sprint" // Default to 'SPRINT' if not selected
                        def options = []
                        if (scope == "sprint") {
                            options = ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "smartqdemo:selected"]
                        } else if (scope == "preprod") {
                            options = ["sqpreprod-india", "sqpreprod-uk", "sqpreprod-us:selected"]
                        } else if (scope == "beta") {
                            options = ["smartqprd-india", "smartqprd-uk", "smartqprd-us:selected"]
                        } else if (scope == "prod") {
                            options = [ "smartqprd-au",
                                        "smartqprd-be",
                                        "smartqprd-chi",
                                        "smartqprd-cn",
                                        "smartqprd-de",
                                        "smartqprd-fi", 
                                        "smartqprd-hk",
                                        "smartqprd-ie",
                                        "smartqprd-india",
                                        "smartqprd-it",
                                        "smartqprd-jp",
                                        "smartqprd-mex",
                                        "smartqprd-nl",
                                        "smartqprd-nz",
                                        "smartqprd-sng",
                                        "smartqprd-spain",
                                        "smartqprd-uae",
                                        "smartqprd-uk",
                                        "smartqprd-us:selected"
                                    ]
                        } else if (scope == "hot-fix") {
                            options = [ "sqpreprod-india", 
                                        "sqpreprod-uk", 
                                        "sqpreprod-us:selected",
                                        "smartqprd-au",
                                        "smartqprd-be",
                                        "smartqprd-chi",
                                        "smartqprd-cn",
                                        "smartqprd-de",
                                        "smartqprd-fi", 
                                        "smartqprd-hk",
                                        "smartqprd-ie",
                                        "smartqprd-india",
                                        "smartqprd-it",
                                        "smartqprd-jp",
                                        "smartqprd-mex",
                                        "smartqprd-nl",
                                        "smartqprd-nz",
                                        "smartqprd-sng",
                                        "smartqprd-spain",
                                        "smartqprd-uae",
                                        "smartqprd-uk",
                                        "smartqprd-us"
                                        ]
                        }
                        return options
                    '''
                ]
            ]
        ],       
        [$class: 'ChoiceParameter',
            choiceType: 'PT_RADIO',
            description: 'Select Deployment Type',
            filterLength: 1,
            filterable: false,
            name: 'DEPLOYMENT_TYPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["India:selected", "International"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def choices = ["India:selected", "International"]
                        return choices
                    '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select Service Name',
            filterLength: 1,
            filterable: false,
            name: 'SERVICE_NAME',
            referencedParameters: 'DEPLOYMENT_TYPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["All:selected","controldesk","web-ort","foodbook-web","smartq-pwa","py2_default","backgroundtasks","taskqservice","reports","bqreports","dashboard","sso","app","pricebook"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def type = DEPLOYMENT_TYPE ?: "India" // Default to 'India' if not selected
                        def options = []
                        if (type == "India") {
                            options = ["All:selected","controldesk","web-ort","foodbook-web","smartq-pwa","py2_default","backgroundtasks","taskqservice","reports","bqreports","dashboard","sso","app","pricebook"]
                        } else if (type == "International") {
                            options = ["All:selected","controldesk","web-ort","time2eat","time2eat-flutter","baweb","appservice","backgroundtasks","taskqservice","reports","bqreports","dashboard","sso","py3_default","integration","pricebook"]
                        }
                        return options
                    '''
                ]
            ]
        ]
    ])
])
pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }
    environment {
        CONTROLDESK_APP_ENGINE_VERSION = ''
        CONTROLDESK_FLUTTER_APP_ENGINE_VERSION = ''
        TIME2EAT_APP_ENGINE_VERSION = ''
        WEBORT_APP_ENGINE_VERSION = ''
        TIME2EAT_FLUTTER_APP_ENGINE_VERSION = ''

        APP_SERVICE_APP_ENGINE_VERSION = ''
        PY2_SERVICE_APP_ENGINE_VERSION = ''
        BQREPORTS_APP_ENGINE_VERSION = ''

        PY3_SERVICE_APP_ENGINE_VERSION = ''
        // Initialize a boolean flag
        INTERNATIONAL_FLAG = false
        VERSION_NUMBER = VersionNumber([
            versionNumberString: '${BUILD_DATE_FORMATTED, "yyyyMMdd"}-${BUILDS_TODAY}', 
            //versionPrefix: 'v1.0.', 
            worstResultForIncrement: 'SUCCESS'
        ])
    }
    stages {
        //stage('parallel'){
            //parallel{
                stage('Check Deployment Type - India / International ') {
                    steps {
                        script {
                            // Define a list of items
                            def lstServers_India = ['smartqdemo', 'sqpreprod-india', 'smartqprd-india']
                            def itemToCheck = params.APP_ENGINE_PROJECT_ID
                            // Check if exists in the list
                            if (lstServers_India.contains(itemToCheck)) {
                                echo "${itemToCheck} is in india servers list."
                                INTERNATIONAL_FLAG = false
                            } else {
                                echo "${itemToCheck} is in International servers list."
                                INTERNATIONAL_FLAG = true
                            }
                            echo "International_flag : ${INTERNATIONAL_FLAG}"
                            // Get the flag value
                            env.DEPLOYMENT_TYPE = INTERNATIONAL_FLAG ? "International" : "India" 
                            echo "Deployment-Type : ${DEPLOYMENT_TYPE}"
                        }
                    }
                }
                //You should have a reference to config-variables-{value}.groovy, in Dashboard -> Manage Jenkins -> Managed files
                stage('Map YAMLs specific to each Service') {
                    steps {
                        script {                    
                            env.RELEASE_SCOPE = params.RELEASE_SCOPE
                            env.APP_ENGINE_PROJECT_ID = params.APP_ENGINE_PROJECT_ID
                            env.GIT_BRANCH = params.GIT_BRANCH
                            mail_url = 'https://cpgplc.webhook.office.com/webhookb2/6d5ff299-54f8-4bb3-911b-4ef2d419e335@cd62b7dd-4b48-44bd-90e7-e143a22c8ead/IncomingWebhook/3b95c290077440da9d684a0c498039e1/1b69cb54-bc9e-4431-98fa-5afcb910e9d4'

                            if(params.SERVICE_NAME == "All" || params.SERVICE_NAME.isEmpty())
                            {
                                def type = DEPLOYMENT_TYPE ?: "India" // Default to 'India' if not selected
                                echo "type of deplyoment is : ${type}"
                                def options = 'controldesk,web-ort,foodbook-web,smartq-pwa,py2_default,backgroundtasks,taskqservice,reports,bqreports,dashboard,sso,app,pricebook'
                                // if (type == "India") {
                                //     options = 'controldesk,web-ort,foodbook-web,smartq-pwa,py2_default,backgroundtasks,taskqservice,reports,bqreports,dashboard,sso,app,pricebook'
                                // } 
                                if (type == "International") {
                                    options = 'controldesk,web-ort,time2eat,time2eat-flutter,baweb,appservice,backgroundtasks,taskqservice,bqreports,dashboard,sso,py3_default,integration,time2eat-flutter,pricebook'
                                }       
                                //echo "SERVICE_NAME_LIST updated - $options"
                                ARR_SELECTED_SERVICE = "$options".split(',')                        
                            } 
                            else {
                                ARR_SELECTED_SERVICE = params.SERVICE_NAME.split(',')
                            }
                            echo "Selected Services - $ARR_SELECTED_SERVICE"

                            // To enable particular group, based on selected service
                            IS_NODEAPPS_ENABLED = ARR_SELECTED_SERVICE.any { element1 -> nodeapps.key.contains(element1) }
                            echo "IS_NODEAPPS_SELECTED - $IS_NODEAPPS_ENABLED"

                            IS_PY2_ENABLED = ARR_SELECTED_SERVICE.any { element2 ->
                                py2_services.key.contains(element2)
                            }
                            echo "IS_PY2_SELECTED - $IS_PY2_ENABLED"

                            IS_PY3_ENABLED = ARR_SELECTED_SERVICE.any { element3 ->
                                py3_services.key.contains(element3)
                            }
                            echo "IS_PY3_SELECTED - $IS_PY3_ENABLED"                    
                            
                            //To get the properties from config-variables-{india/international}.groovy file
                            MY_FILE_ID = "config-variables-${DEPLOYMENT_TYPE}"
                            configFileProvider([configFile(fileId: "$MY_FILE_ID", variable: 'GroovyScript')]) {
                                load("$GroovyScript").setProperties()
                                echo "$GCS_BUCKET_NAME"
                                echo "$ENVIRONMENT"//see if you can get rid of this in all the places & use GIT_BRANCH, as both are same now
                                echo "GIT_BRANCH - $GIT_BRANCH"

                                echo "$CONTROLDESK_YAML"
                                echo "$PWA_YAML"
                                echo "$FOODBOOK_YAML"                       
                                echo "$TIME2EAT_YAML"
                                echo "$BAWEB_YAML"
                                echo "$WEBORT_YAML"
                                echo "$TIME2EAT_FLUTTER_YAML"

                                echo "$APP_SERVICE_YAML"
                                echo "$DEFAULT_SERVICE_YAML" 
                                echo "$BACKGROUND_YAML"
                                echo "$TASKQSERVICE_YAML"
                                echo "$REPORTS_YAML"
                                echo "$BQREPORTS_YAML"

                                echo "$PY3_APPMS_YAML"
                                echo "$PY3_DASHBOARD_YAML"
                                echo "$PY3_SSO_YAML"
                                echo "$PY3_PRICEBOOK_YAML"
                                echo "$PY3_INTEGRATION_YAML"                        
                            }
                        }                
                    }
                }
                stage('Get the versions to be deployed') {
                    steps {
                        script {
                            //node app - versions                  
                            TIME2EAT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'time2eat')     
                            CONTROLDESK_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'controldesk') 
                            CONTROLDESK_FLUTTER_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'controldeskflutter')
                            WEBORT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'web-ort')
                            TIME2EAT_FLUTTER_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'time2eat-flutter')
                            //Py2 serices related versions
                            APP_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'ewallet')
                            ADMIN_DASHBOARD_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'generic-admin-dashboard')
                            BQREPORTS_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'vendor-dashboard')
                            PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')
                            //PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend') + "-" + APP_SERVICE_APP_ENGINE_VERSION + "-" +  ADMIN_DASHBOARD_APP_ENGINE_VERSION  + "-" + VENDOR_DASHBOARD_APP_ENGINE_VERSION  //Must not exceed 63 characters.
                            //py3 micro service- version
                            PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                        }
                    }
                }
                stage('Set GCloud ProjectID') {
                steps {
                        container('gcloud') {
                            echo "Selected APP_ENGINE_PROJECT_ID: ${params.APP_ENGINE_PROJECT_ID}"
                            sh "gcloud config set project ${params.APP_ENGINE_PROJECT_ID}"
                        }               
                    }  
                }
            //}    
        //}
        //2. Add new application block       
        stage('parallel deploy'){
            parallel{
                stage('NodeJs:Deploy Apps') { 
                    when {
                        expression { return IS_NODEAPPS_ENABLED } // Check the condition here
                    }                    
                    steps {
                        container('gcloud') {
                            script {
                                def PWA_APP_NAME = "time2eat"
                                if('smartq-pwa' in ARR_SELECTED_SERVICE || 'foodbook-web' in ARR_SELECTED_SERVICE || 'time2eat' in ARR_SELECTED_SERVICE || 'baweb' in ARR_SELECTED_SERVICE) {
                                    
                                    sh "mkdir -p ${PWA_APP_NAME}-latest"
                                    def PWA_STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${PWA_APP_NAME}")
                                    sh "gcloud storage cp ${PWA_STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${PWA_APP_NAME}-latest --recursive"
                                    dir("${PWA_APP_NAME}-latest") {
                                        sh 'ls'
                                        sh "tar -xzvf ${TIME2EAT_APP_ENGINE_VERSION}.tar.gz"
                                        sh 'ls; pwd'
                                    }                                   
                                }
                                def parallelJobs = [:]
                                if ('controldesk' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'controldesk', app_name: 'controldesk') == false) { // if controldesk in selected list , then we have to deploy flutter also
                                    parallelJobs[nodeapps.find { it.key == 'controldesk' }] = {
                                        def APP_NAME = "controldesk"
                                        sh "mkdir -p ${APP_NAME}-latest"
                                        sh "echo controldesk enter"
                                        
                                        // copy the binaries to build agent workspace - making it ready for deployment
                                        def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                        echo "${APP_NAME}"
                                        sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest/ --recursive"                                                                               
                                        dir("${APP_NAME}-latest") {
                                            sh 'ls'
                                            sh "tar -xzvf ${CONTROLDESK_APP_ENGINE_VERSION}.tar.gz"
                                            sh 'ls; pwd'                                          
                                            sh "gcloud app deploy --version=$CONTROLDESK_APP_ENGINE_VERSION --quiet $CONTROLDESK_YAML --no-promote"
                                        }
                                        ARR_VERIFY_SERVICE.add([service_name: 'controldesk', version_name: "$CONTROLDESK_APP_ENGINE_VERSION", url_suffix: 'control-desk/login'])
                                    }
                                }
                                if ('controldesk' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'control-desk-flutter', app_name: 'controldeskflutter') == false) { // if controldesk in selected list , then we have to deploy flutter also -- if condition won't change here                           
                                    parallelJobs[nodeapps.find { it.key == 'controldeskflutter' }] = {
                                        def CONTROLDESK_FLUTTER_YAML = 'control-desk.yaml' //To-Do: need to get it from config variable, as like others
                                        //controldeskflutter
                                        def APP_NAME = "controldeskflutter"
                                        sh "mkdir -p ${APP_NAME}-latest"
                                        // copy the binaries to build agent workspace - making it ready for deployment
                                        def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                        echo "${APP_NAME}"
                                        sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest/ --recursive"
                                        dir("${APP_NAME}-latest") {
                                            sh 'ls'
                                            sh "tar -xzvf ${CONTROLDESK_FLUTTER_APP_ENGINE_VERSION}.tar.gz"
                                            sh 'ls; pwd'
                                            sh "gcloud app deploy --version=$CONTROLDESK_FLUTTER_APP_ENGINE_VERSION --quiet $CONTROLDESK_FLUTTER_YAML --no-promote"
                                        }
                                        ARR_VERIFY_SERVICE.add([service_name: 'control-desk-flutter', version_name: "$CONTROLDESK_FLUTTER_APP_ENGINE_VERSION", url_suffix: 'control-desk-v2/login'])
                                    }
                                }  
                                if (!INTERNATIONAL_FLAG && 'smartq-pwa' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'smartq-pwa', app_name: 'time2eat') == false) {
                                    parallelJobs[nodeapps.find { it.key == 'smartq-pwa' }] = {
                                        dir("${PWA_APP_NAME}-latest") {
                                            sh 'ls'
                                            sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet $PWA_YAML --no-promote"
                                        }
                                        ARR_VERIFY_SERVICE.add([service_name: 'smartq-pwa', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'smartq-pwa/main'])
                                    }
                                }
                                if (!INTERNATIONAL_FLAG && 'foodbook-web' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'foodbook-web', app_name: 'time2eat') == false) {
                                    parallelJobs[nodeapps.find { it.key == 'foodbook-web' }] = {
                                        dir("${PWA_APP_NAME}-latest") {
                                            sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet $FOODBOOK_YAML --no-promote"
                                        }
                                        ARR_VERIFY_SERVICE.add([service_name: 'foodbook-web', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'foodbook-web/main'])   
                                    }
                                }
                                if (INTERNATIONAL_FLAG && 'time2eat' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'time2eat', app_name: 'time2eat') == false) {
                                    parallelJobs[nodeapps.find { it.key == 'time2eat' }] = {
                                        dir("${PWA_APP_NAME}-latest") {
                                           
                                            sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet $TIME2EAT_YAML --no-promote"
                                        }
                                        ARR_VERIFY_SERVICE.add([service_name: 'time2eat', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'time2eat/main'])   
                                    }
                                }
                                if (INTERNATIONAL_FLAG && 'baweb' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'baweb', app_name: 'time2eat') == false) {
                                    parallelJobs[nodeapps.find { it.key == 'baweb' }] = {
                                        dir("${PWA_APP_NAME}-latest") {
                                            
                                            if (params.APP_ENGINE_PROJECT_ID.contains("-us")) {
                                                sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet $BAWEB_YAML --no-promote"
                                            }
                                            if (params.APP_ENGINE_PROJECT_ID.contains("-us")) {
                                                ARR_VERIFY_SERVICE.add([service_name: 'baweb', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'baweb/main'])
                                            }
                                        }   
                                    }
                                }
                                if ('web-ort' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'web-ort', app_name: 'web-ort') == false) {
                                    parallelJobs[nodeapps.find { it.key == 'web-ort' }] = {                                                           
                                        def APP_NAME = "web-ort"
                                        sh "mkdir -p ${APP_NAME}-latest"
                                        sh "echo webort enter"
                                        // copy the binaries to build agent workspace - making it ready for deployment 
                                        def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                        sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                        
                                        dir("${APP_NAME}-latest") {
                                            sh 'ls'
                                            sh "tar -xzvf ${WEBORT_APP_ENGINE_VERSION}.tar.gz"
                                            sh 'ls; pwd'
                                            
                                            sh "gcloud app deploy --version=$WEBORT_APP_ENGINE_VERSION --quiet $WEBORT_YAML --no-promote"
                                        }
                                        ARR_VERIFY_SERVICE.add([service_name: 'web-ort', version_name: "$WEBORT_APP_ENGINE_VERSION", url_suffix: 'web-ort/main'])                        
                                    }
                                }
                                
                                if (INTERNATIONAL_FLAG && 'time2eat-flutter' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'time2eat-flutter', app_name: 'time2eat-flutter') == false) {
                                    parallelJobs[nodeapps.find { it.key == 'time2eat-flutter' }] = {                                                           
                                        def APP_NAME = "time2eat-flutter"
                                        sh "mkdir -p ${APP_NAME}-latest"
                                        sh "echo time2eat-flutter enter"
                                        // copy the binaries to build agent workspace - making it ready for deployment 
                                        def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                        sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                        
                                        dir("${APP_NAME}-latest") {
                                            sh 'ls'
                                            sh "tar -xzvf ${TIME2EAT_FLUTTER_APP_ENGINE_VERSION}.tar.gz"
                                            sh 'ls; pwd'
                                            
                                            if (params.APP_ENGINE_PROJECT_ID.contains("-uk")) {
                                                sh "gcloud app deploy --version=$TIME2EAT_FLUTTER_APP_ENGINE_VERSION --quiet $TIME2EAT_FLUTTER_YAML --no-promote"
                                            }
                                            if (params.APP_ENGINE_PROJECT_ID.contains("-uk")) {
                                                ARR_VERIFY_SERVICE.add([service_name: 'time2eat-flutter', version_name: "$TIME2EAT_FLUTTER_APP_ENGINE_VERSION", url_suffix: 'time2eat-v2/'])
                                            }
                                        }                                                                
                                    }
                                }
                                //2.1 Add new application block here
                                parallel(parallelJobs)
                            }
                        }
                    }
                }
                stage('Py2:Deploy Backend Services') {
                    when {
                        expression { return IS_PY2_ENABLED } // Check the condition here
                    }          
                    stages {
                        stage('Py2:Clone smartq-backend') { 
                            steps { 
                                script {
                                    sh "mkdir -p smartq-cloud-backend"
                                    dir('smartq-cloud-backend') {  
                                        checkout([$class: 'GitSCM', 
                                            branches: [[name: "${GIT_BRANCH}"]], 
                                            doGenerateSubmoduleConfigurations: false, 
                                            extensions: [[$class: 'CleanCheckout']], 
                                            userRemoteConfigs: [[url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/smartq-cloud-backend.git', credentialsId: 'serviceaccount',]]]) 
                                        dir ('py3_project/py3_backend/bqreports/admindashboard/') {
                                                sh 'rm -rf ./{*,.*}'
                                        }
                                        dir ('py3_project/py3_backend/bqreports/reports/') {
                                            sh 'rm -rf ./{*,.*}'
                                        }
                                        dir ('eWallet') {
                                            sh 'rm -rf ./{*,.*}'
                                        }     
                                        sh 'ls -lrt'
                                    }
                                }
                            } 
                        }
                        stage('Py2:Copy build output - ewallet, admin & vendor dash-board') {
                            steps {                
                                dir ('smartq-cloud-backend') {
                                    container('gcloud') {
                                        script {  
                                            sh "echo ${WORKSPACE}"
                                            //1. copy generic-admin-dashboard - making it ready for deployment
                                            def APP_NAME = "generic-admin-dashboard" 
                                            def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                            sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive"
                                            
                                            //2. copy vendor-dashboard - making it ready for deployment
                                            APP_NAME = "vendor-dashboard" 
                                            STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                            sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive"
                                            
                                            //3.copy ewallet - making it ready for deployment
                                            APP_NAME = "ewallet" 
                                            STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                            sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive"
                                            
                                            dir ('py3_project/py3_backend/bqreports/admindashboard') {
                                                sh 'ls -lrt'
                                                sh "tar -xzvf ${ADMIN_DASHBOARD_APP_ENGINE_VERSION}.tar.gz"                                                
                                            }
                                            dir ('py3_project/py3_backend/bqreports/reports') {
                                                sh 'ls -lrt'
                                                sh "tar -xzvf ${BQREPORTS_APP_ENGINE_VERSION}.tar.gz"                                             
                                            }
                                            dir ('eWallet') {
                                                sh 'ls -lrt'
                                                sh "tar -xzvf ${APP_SERVICE_APP_ENGINE_VERSION}.tar.gz"                               
                                            }
                                        }
                                    }
                                }
                                sh "echo line 644"
                            }                           
                        }
                        stage('Py2:Deploy Backend Services') {
                            steps {
                                container('gcloud') {
                                    script {
                                        def parallelJobs = [:]                                                               
                                        echo "PY2_SERVICE_APP_ENGINE_VERSION : $PY2_SERVICE_APP_ENGINE_VERSION"
                                        if (INTERNATIONAL_FLAG && 'appservice' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'appservice', app_name: 'ewallet') == false) {
                                            parallelJobs[py2_services.find { it.key == 'appservice' }] = {
                                                dir ('smartq-cloud-backend'){
                                                    sh "ls *.yaml"
                                                    
                                                    sh "gcloud app deploy --version=$APP_SERVICE_APP_ENGINE_VERSION --quiet $APP_SERVICE_YAML --no-promote"
                                                }
                                                ARR_VERIFY_SERVICE.add([service_name: 'appservice', version_name: "$APP_SERVICE_APP_ENGINE_VERSION", url_suffix: 'eWallet/transactions'])  
                                            }
                                        }
                                        if (!INTERNATIONAL_FLAG && 'py2_default' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'default', app_name: 'smartq-cloud-backend') == false) { // ! For India only - Skip this when the condition is false
                                            parallelJobs[py2_services.find { it.key == 'py2_default' }] = {
                                                dir ('smartq-cloud-backend') {
                                                    sh "ls *.yaml"
                                                   
                                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $DEFAULT_SERVICE_YAML --no-promote"
                                                }                                                //py2 services - default
                                                ARR_VERIFY_SERVICE.add([service_name: 'default', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: ''])                                       
                                            }
                                        }
                                        if ('backgroundtasks' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'backgroundtasks', app_name: 'smartq-cloud-backend') == false) {
                                            parallelJobs[py2_services.find { it.key == 'backgroundtasks' }] = {
                                                dir ('smartq-cloud-backend') {
                                                    
                                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $BACKGROUND_YAML --no-promote"
                                                }
                                                ARR_VERIFY_SERVICE.add([service_name: 'backgroundtasks', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload'])  
                                            }
                                        }
                                        if ('taskqservice' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'taskqservice', app_name: 'smartq-cloud-backend') == false) {
                                            parallelJobs[py2_services.find { it.key == 'taskqservice' }] = {
                                                dir ('smartq-cloud-backend'){
                                                    
                                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $TASKQSERVICE_YAML --no-promote"
                                                }
                                                ARR_VERIFY_SERVICE.add([service_name: 'taskqservice', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload'])                                                              
                                            }
                                        }
                                        if (!INTERNATIONAL_FLAG && 'reports' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'reports', app_name: 'smartq-cloud-backend') == false) { // ! For India only - Skip this when the condition is false
                                            parallelJobs[py2_services.find { it.key == 'reports' }] = {
                                                dir ('smartq-cloud-backend'){
                                                    sh "ls *.yaml"
                                                    
                                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $REPORTS_YAML --no-promote"
                                                }
                                                //py2 services
                                                ARR_VERIFY_SERVICE.add([service_name: 'reports', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload'])                                        
                                            }
                                        }
                                        //2.1 Add new service block here, if there is any to be added
                                        parallel(parallelJobs)
                                    }
                                }
                            }
                        }
                        stage('Py2:Deploy BQ Reports') {
                            steps {
                                script {
                                    container('gcloud') {                                        
                                        def py2_bqreports = [:]
                                        sh "echo ${ARR_SELECTED_SERVICE}"
                                        //sh "echo ${is_Version_Exists}"
                                        if ('bqreports' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'bqreports', app_name: 'vendor-dashboard') == false) {
                                            py2_bqreports[py2_services.find { it.key == 'bqreports' }] = {
                                                dir ('smartq-cloud-backend') {                                                    
                                                    dir ('py3_project') {
                                                        sh "ls *.yaml"
                                                        
                                                        sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $BQREPORTS_YAML --no-promote"
                                                    }
                                                    ARR_VERIFY_SERVICE.add([service_name: 'bqreports', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'reports/index.html#/'])  
                                                }
                                            }
                                        }
                                        //2.1 Add new service block here, if there is any to be added
                                        parallel(py2_bqreports)                        
                                    }               
                                }
                            }
                        }
                    }
                }
                stage('Py3:Deploy Micro Services') {
                    when {
                        expression { return IS_PY3_ENABLED } // Check the condition here
                    }           
                    stages {
                        stage('Py3:Clone') { 
                            steps { 
                                sh "mkdir -p sq_microservices_backend"
                                dir('sq_microservices_backend') {                        
                                    checkout([$class: 'GitSCM', 
                                        branches: [[name: "${GIT_BRANCH}"]], 
                                        doGenerateSubmoduleConfigurations: false, 
                                        extensions: [[$class: 'CleanCheckout']], 
                                        userRemoteConfigs: [[url: 'https://AbhijeetSawhney@bitbucket.org/bottlelabtech/sq_microservices_backend.git', credentialsId: 'serviceaccount',]]])
                                                
                                sh 'ls -lrt'
                                }
                            } 
                        }
                        stage('Py3:Deploy') {
                            steps {
                                container('gcloud') {
                                    script {
                                        sh "echo ${WORKSPACE}"

                                        def parallelJobs = [:]
                                        if (!INTERNATIONAL_FLAG && 'app' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'app', app_name: 'sq_microservices_backend') == false) {
                                            parallelJobs[py3_services.find { it.key == 'app' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'cp -r commonlib appms'
                                                    dir ('appms') {
                                                        sh "ls *.yaml"
                                                        
                                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_APPMS_YAML --no-promote"
                                                    }                                           
                                                    //py3 -app : india
                                                    ARR_VERIFY_SERVICE.add([service_name: 'app', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: ''])  
                                                }                             
                                            }
                                        }
                                        if (INTERNATIONAL_FLAG && 'py3_default' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'default', app_name: 'sq_microservices_backend') == false) {
                                            parallelJobs[py3_services.find { it.key == 'py3_default' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'cp -r commonlib appms'
                                                    dir ('appms') {
                                                        sh "ls *.yaml"
                                                        
                                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_APPMS_YAML --no-promote"
                                                    }                                           
                                                    //py3 -app : international
                                                    ARR_VERIFY_SERVICE.add([service_name: 'default', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: ''])  
                                                }                             
                                            }
                                        }
                                        if ('dashboard' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'dashboard', app_name: 'sq_microservices_backend') == false) {
                                            parallelJobs[py3_services.find { it.key == 'dashboard' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'cp -r commonlib dashboardms'
                                                    dir ('dashboardms') {
                                                        sh "ls *.yaml"
                                                        
                                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_DASHBOARD_YAML --no-promote"
                                                    }
                                                    //py3 services
                                                    ARR_VERIFY_SERVICE.add([service_name: 'dashboard', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v2/bck/dummy'])                                                                     
                                                }                               
                                            }
                                        }
                                        if ('sso' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'sso', app_name: 'sq_microservices_backend') == false) {
                                            parallelJobs[py3_services.find { it.key == 'sso' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'cp -r commonlib sso_flex'
                                                    dir ('sso_flex') {
                                                        sh "ls *.yaml"
                                                        
                                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_SSO_YAML --no-promote"
                                                    }
                                                    ARR_VERIFY_SERVICE.add([service_name: 'sso', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v2/app/sso/_health_check'])  
                                                }                                 
                                            }
                                        }
                                        if('pricebook' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'pricebook', app_name: 'sq_microservices_backend') == false) {// ! For India only - Skip this when the condition is false
                                            parallelJobs[py3_services.find { it.key == 'pricebook' }] = {
                                                
                                                
                                                if (params.APP_ENGINE_PROJECT_ID.contains("-us")) {
                                                    dir ('sq_microservices_backend') {
                                                        sh 'cp -r commonlib pricebook'
                                                        dir ('pricebook') {
                                                            sh "ls *.yaml"
                                                            sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_PRICEBOOK_YAML --no-promote"
                                                        }                                                        
                                                    }
                                                    ARR_VERIFY_SERVICE.add([service_name: 'pricebook', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v1/pricebook/category/search?categoryname=1']) 
                                                }
                                                //'''
                                                // if (params.APP_ENGINE_PROJECT_ID.contains("-us") && params.APP_ENGINE_PROJECT_ID.contains("-india")) {   
                                                //     ARR_VERIFY_SERVICE.add([service_name: 'pricebook', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v1/pricebook/category/search?categoryname=1']) 
                                                // }
                                            }
                                        }
                                        if(INTERNATIONAL_FLAG && 'integration' in ARR_SELECTED_SERVICE && is_Version_Exists(service_name: 'integration', app_name: 'sq_microservices_backend') == false) {// ! For India only - Skip this when the condition is false
                                            parallelJobs[py3_services.find { it.key == 'integration' }] = {
                                            
                                                //enable only for uk servers
                                                if (params.APP_ENGINE_PROJECT_ID.contains("-uk")) {
                                                    dir ('sq_microservices_backend') {
                                                        sh 'cp -r commonlib appms'
                                                        dir ('appms') {
                                                            sh "ls *.yaml"
                                                            sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_INTEGRATION_YAML --no-promote"
                                                        }
                                                    }    
                                                    
                                                }
                                                if (params.APP_ENGINE_PROJECT_ID.contains("-uk")) {
                                                    ARR_VERIFY_SERVICE.add([service_name: 'integration', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: ''])
                                                }   
                                            }
                                        }    
                                        //2.1 Add new service block here, if there is any to be added
                                        parallel(parallelJobs)
                                    }
                                }
                            }
                        }
                    }
                }
            }    
        }
        stage ('Check URL Status')  {
            steps {
                container('gcloud') {                    
                    script {                        
                        for (item in ARR_VERIFY_SERVICE)   
                        {
                            item.status = getURL_Status(service_name: "${item.service_name}", version_name: "${item.version_name}", url_suffix: "${item.url_suffix}") 
                            item.previous_version = get_Previous_Version(service_name: "${item.service_name}") 
                            item.new_version = "${item.version_name}"
                        }
                        println "result of verify service: ${ARR_VERIFY_SERVICE}"                         
                    }
                }
            }
        }     
        stage('Promote') {
           steps {
                container('gcloud') {                    
                    script {                        
                        def failed_url_count = ARR_VERIFY_SERVICE.findAll{ row -> row.status != '200'}.size()
                        echo "failed_url_count - $failed_url_count"
                        if (failed_url_count == 0) {
                            for (item in ARR_VERIFY_SERVICE)   
                            {                           
                                if (item.status == "200") {
                                    echo "promoting - ${item.service_name}"
                                    promote_Service(service_name: "${item.service_name}", version_name: "${item.version_name}")
                                    PROMOTED_SERVICES.add(item)
                                }                                                   
                            }
                            //method/logic to write the array to a file
                            Write_To_File()
                        }
                        else {  
                            error('Promote halted....')
                        }
                    }
                }               
            }  
        }       
    }
    // post{
    //     always{
    //         script {
    //             office365ConnectorSend webhookUrl: "${mail_url}",
    //             message : "Job Name: ${Job_Name}.\n Build Status: ${currentBuild.currentResult}.\n Jenkins Build Number: ${Build_Number}.\n Version Number: ${VERSION_NUMBER}.\n Build Server - ${APP_ENGINE_PROJECT_ID}.\n\n Services Promoted - ${PROMOTED_SERVICES}",
    //             status: "Deployment Status# ${currentBuild.currentResult}"
    //         }
    //     }
    // }
}