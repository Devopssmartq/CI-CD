/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
def getURL_Status(Map args) {
    script {
        def service_url = sh(script: "gcloud app browse --service=${args.service_name} --version=${args.version_name} --no-launch-browser --format='value(url)'", returnStdout: true).trim()
        // must call trim() to remove the default trailing newline
        final status_code = sh(script: "curl --write-out %{http_code} --silent --output /dev/null '${service_url}/${args.url_suffix}'", returnStdout: true).trim()
        echo status_code

        if (status_code == "200") {
            echo "Success with Status Code : ${status_code}" 
        }
        else { 
            FAILED_URL_STATUS_COUNT = (FAILED_URL_STATUS_COUNT.toInteger() + 1).toString()
            echo "Failed URL count : ${FAILED_URL_STATUS_COUNT}"
        }
    }
}

def get_Storage_Object_Source_Path(Map args) { 
    def source_path = sh (
        script: "gcloud storage ls gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name} | sort --ignore-case -rV | head -n 1",
        returnStdout: true
    ).trim()

    return "${source_path}"
}

def get_AppEngine_Version(Map args) {
        def STORAGE_OBJECT_SOURCE_PATH = sh (
                script: "gcloud storage ls gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name} | sort --ignore-case -rV | head -n 1",
                returnStdout: true
        ).trim()
                                           
        def APP_ENGINE_VERSION = sh (
                script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                returnStdout: true
        ).trim().split('@')[1]

        echo "App_Engine_Version for ${args.app_name} : ${APP_ENGINE_VERSION}"       
        return "${APP_ENGINE_VERSION}"
}

properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select Release Scope',
            filterLength: 1,
            filterable: false,
            name: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,// should be true, otherwise you have to manually approve the script
                    script: 'return ["Error: Script execution is disabled"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,// should be true, otherwise you have to manually approve the script
                    script: '''
                        def choices = ['sprint:selected']
                        return choices
                    '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            referencedParameters: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["Error: Script execution is disabled"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,// should be true, otherwise you have to manually approve the script
                    script: '''
                        def category = RELEASE_SCOPE ?: 'sprint' // Default to 'SPRINT' if not selected
                        def options = []
                        if (category == "sprint") {
                            options = ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "smartqdemo:selected"]
                        }
                        return options
                    '''
                ]
            ]
        ]
    ])
])

pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }

    environment {
        FAILED_URL_STATUS_COUNT = '0'
        GCS_BUCKET_NAME = "sqinternational-cicd.appspot.com"
        ENVIRONMENT = "SPRINT-DEMO"

        CONTROLDESK_APP_ENGINE_VERSION = ''
        TIME2EAT_APP_ENGINE_VERSION = ''
        WEBORT_APP_ENGINE_VERSION = ''

        APP_SERVICE_APP_ENGINE_VERSION = ''
        PY2_SERVICE_APP_ENGINE_VERSION = ''
        BQREPORTS_APP_ENGINE_VERSION = ''

        PY3_SERVICE_APP_ENGINE_VERSION = ''

         // Initialize a boolean flag
        INTERNATIONAL_FLAG = false
    }
   
    stages {
        stage('Check Deployment Type - India / International ') {
            steps {
                script {
                    // Define a list of items
                    def lstServers_India = ['smartqdemo', 'sqpreprod-india', 'smartqprd-india']
                    def itemToCheck = params.APP_ENGINE_PROJECT_ID
                    // Check if exists in the list
                    if (lstServers_India.contains(itemToCheck)) {
                        echo "${itemToCheck} is in the list."
                        INTERNATIONAL_FLAG = false
                    } else {
                        echo "${itemToCheck} is not in the list."
                        INTERNATIONAL_FLAG = true
                    }
                    echo "international_flag : ${INTERNATIONAL_FLAG}"
                }
            }
        }
        //You should have a reference to env_vars.groovy, in Dashboard -> Manage Jenkins -> Managed files
        stage('Map YAMLs specific to each Service') {
            steps {
                script {
                    // Get the flag value
                    env.DEPLOYMENT_TYPE = INTERNATIONAL_FLAG ? "international" : "india" 
                    echo "releaseType : ${DEPLOYMENT_TYPE}"

                    MY_FILE_ID = "yaml-vars-${DEPLOYMENT_TYPE}"
                    configFileProvider([configFile(fileId: "$MY_FILE_ID", variable: 'GroovyScript')]) {
                        load("$GroovyScript").setProperties()
                        echo "${GCS_BUCKET_NAME}"
                        echo "${ENVIRONMENT}"

                        echo "$CONTROLDESK_YAML"
                        echo "$PWA_YAML"
                        echo "$FOODBOOK_YAML"
                        echo "$WEBORT_YAML"

                        echo "$APP_SERVICE_YAML"
                        echo "$DEFAULT_SERVICE_YAML" 
                        echo "$BACKGROUND_YAML"
                        echo "$TASKQSERVICE_YAML"
                        echo "$REPORTS_YAML"
                        echo "$BQREPORTS_YAML"

                        echo "$PY3_APPMS_YAML"
                        echo "$PY3_DASHBOARD_YAML"
                        echo "$PY3_SSO_YAML"
                        echo "$PY3_PRICEBOOK_YAML"
                        //if beta & india then APP_SERVICE_YAML =  
                    }
                }                
            }
        }
        stage('Set GCloud ProjectID') {
           steps {
                container('gcloud') {
                    echo "Selected APP_ENGINE_PROJECT_ID: ${params.APP_ENGINE_PROJECT_ID}"
                    sh "gcloud config set project ${params.APP_ENGINE_PROJECT_ID}"
                }               
            }  
        }      
        stage('Deploy NodeJS Apps') {
            steps {
                parallel (
                    controldesk: {
                            container('gcloud') {
                                script {
                                    def APP_NAME = "controldesk"
                                    sh "mkdir -p ${APP_NAME}-latest" 

                                    def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest/ --recursive"
                                    
                                    CONTROLDESK_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'controldesk')
                                    
                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$CONTROLDESK_APP_ENGINE_VERSION --quiet $CONTROLDESK_YAML --no-promote"
                                    }                                    
                                }
                            }
                    },
                    smartqPWA: {
                        container('gcloud') {                           
                            script {
                                    def APP_NAME = "time2eat"
                                    sh "mkdir -p ${APP_NAME}-latest"

                                    def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                    
                                    TIME2EAT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'time2eat')
                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet $PWA_YAML --no-promote"
                                        sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet $FOODBOOK_YAML --no-promote"
                                    }                                    
                            }
                        }
                    },
                    webORT: {
                        container('gcloud') {                            
                            script {
                                def APP_NAME = "web-ort"
                                sh "mkdir -p ${APP_NAME}-latest" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                
                                WEBORT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'web-ort')                                
                               
                                dir("${APP_NAME}-latest") {
                                    sh "gcloud app deploy --version=$WEBORT_APP_ENGINE_VERSION --quiet $WEBORT_YAML --no-promote"
                                }                                            
                            }
                        }
                    }
                ) 
            }
        }
        stage('Clone smartq-backend') { 
            steps { 
                sh "mkdir -p smartq-cloud-backend"
                dir('smartq-cloud-backend') {                        
                    git branch: 'cicd-sprint',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/smartq-cloud-backend.git'

                dir ('py3_project/py3_backend/bqreports/admindashboard/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('py3_project/py3_backend/bqreports/reports/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('eWallet'){
                        sh 'rm -rf ./{*,.*}'
                    }     
                sh 'ls -lrt'
                }
            } 
        }
        stage('copy build output - ewallet, admin & vendor dash-board') {
            steps {                
                dir ('smartq-cloud-backend') {
                    container('gcloud') {
                        sh "echo ${WORKSPACE}"
                        script {  
                                def APP_NAME = "generic-admin-dashboard" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive"
                        }
                        
                        script {  
                                def APP_NAME = "vendor-dashboard" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive"
                        }

                        script {  
                                def APP_NAME = "ewallet" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive"
                        }        

                        dir ('py3_project/py3_backend/bqreports/admindashboard') {
                            sh 'ls -lrt'
                        }
                        dir ('py3_project/py3_backend/bqreports/reports') {
                            sh 'ls -lrt'
                        }
                        dir ('eWallet') {
                            sh 'ls -lrt'
                        }
                    }
                }
            }
        }
        stage('Deploy Smartq Backend') {
            steps {
                parallel (
                    appservice: {
                        container('gcloud') {
                            script {
                                APP_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'ewallet')                                
                                dir ('smartq-cloud-backend'){
                                    sh "ls *.yaml"
                                    sh "gcloud app deploy --version=$APP_SERVICE_APP_ENGINE_VERSION --quiet $APP_SERVICE_YAML --no-promote"
                                }
                            }                                
                        }
                    },
                    defaultservice: {
                        container('gcloud') {
                            script {
                                PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')                                
                                dir ('smartq-cloud-backend'){
                                    sh "ls *.yaml"
                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $DEFAULT_SERVICE_YAML --no-promote"
                                }
                            }                                
                        }
                    },
                    backgroundtasks: {
                        container('gcloud') {
                            script {
                                PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')                                
                                dir ('smartq-cloud-backend') {
                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $BACKGROUND_YAML --no-promote"
                                }                                
                            }               
                        }
                    },
                    taskqservice: {
                        container('gcloud') {
                            script {
                                PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')                                
                                dir ('smartq-cloud-backend'){
                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $TASKQSERVICE_YAML --no-promote"
                                }  
                            }      
                        }
                    },
                    reports: {
                        container('gcloud') {
                            script {
                                PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')                                
                                dir ('smartq-cloud-backend'){
                                    sh "ls *.yaml"
                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $REPORTS_YAML --no-promote"
                                }
                            }                                
                        }
                    }   
                )
            }
        }
        stage('Deploy to BQ Reports') {
            steps {
                container('gcloud') {
                    script {
                        BQREPORTS_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'vendor-dashboard')                                
                        dir ('smartq-cloud-backend') {
                            dir ('py3_project') {
                                sh "ls *.yaml"
                                sh "gcloud app deploy --version=$BQREPORTS_APP_ENGINE_VERSION --quiet $BQREPORTS_YAML --no-promote"
                            }
                        }                        
                    }
                }               
            }
        }
        stage('Clone sq_microservices_backend') { 
            steps { 
                sh "mkdir -p sq_microservices_backend"
                dir('sq_microservices_backend') {                        
                    git branch: 'cicd-sprint',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/sq_microservices_backend.git'
                                   
                sh 'ls -lrt'
                }
            } 
        }
        stage('Deploy Microservices') {
            steps {
                parallel (
                    appms: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"
                            script {
                                PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib appms'
                                    dir ('appms') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_APPMS_YAML --no-promote"
                                    }
                                }                                
                            }
                        } 
                    },
                    dashboardms: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"
                            script {
                                PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib dashboardms'
                                    dir ('dashboardms') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_DASHBOARD_YAML --no-promote"
                                    }                                  
                                }
                            }
                        }
                    },
                    sso_flex: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"              
                            script {
                                PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib sso_flex'
                                    dir ('sso_flex') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_SSO_YAML --no-promote"
                                    }
                                }                   
                            }
                        }
                    },
                    pricebook: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"
                            script {
                                PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib pricebook'
                                    dir ('pricebook') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_PRICEBOOK_YAML --no-promote"
                                    }                                  
                                }
                            }
                        }
                    },              
                )
            }
        }
        stage ('Check URL Status')  {
            steps {
                container('gcloud') {                    
                    script {
                        //nodeJs apps
                        getURL_Status(service_name: 'controldesk', version_name: "$CONTROLDESK_APP_ENGINE_VERSION", url_suffix: 'control-desk/login')
                        getURL_Status(service_name: 'foodbook-web', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'foodbook-web/main')
                        getURL_Status(service_name: 'smartq-pwa', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'smartq-pwa/main')                        
                        getURL_Status(service_name: 'web-ort', version_name: "$WEBORT_APP_ENGINE_VERSION", url_suffix: 'web-ort/main')                        
                        //py2 services
                        getURL_Status(service_name: 'appservice', version_name: "$APP_SERVICE_APP_ENGINE_VERSION", url_suffix: 'eWallet/transactions')
                        getURL_Status(service_name: 'default', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: '')
                        getURL_Status(service_name: 'backgroundtasks', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload')
                        getURL_Status(service_name: 'taskqservice', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload')                        
                        getURL_Status(service_name: 'reports', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload')                        
                        //bqreports
                        getURL_Status(service_name: 'bqreports', version_name: "$BQREPORTS_APP_ENGINE_VERSION", url_suffix: 'reports/index.html#/')
                        //py3 services
                        getURL_Status(service_name: 'app', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: '')                        
                        getURL_Status(service_name: 'dashboard', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v2/bck/dummy')                        
                        //getURL_Status(service_name: 'sso', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v2/app/sso/_health_check')
                        getURL_Status(service_name: 'pricebook', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v1/pricebook/category/search?categoryname=1')
                    }
                }
             }
        }       
        stage('Promote') {
           steps {
                container('gcloud') {                    
                    script { 
                        env.failed_url_count = FAILED_URL_STATUS_COUNT.toInteger().toString()
                        echo "Failed URL count : ${env.failed_url_count}"                  
                        if (env.failed_url_count == "0") { 
                            //node js apps
                            sh "gcloud app services set-traffic 'controldesk' --splits $CONTROLDESK_APP_ENGINE_VERSION=1 --quiet" 
                            sh "gcloud app services set-traffic 'foodbook-web' --splits $TIME2EAT_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'smartq-pwa' --splits $TIME2EAT_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'web-ort' --splits $WEBORT_APP_ENGINE_VERSION=1 --quiet"
                            //py2 services
                            sh "gcloud app services set-traffic 'appservice' --splits $APP_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'default' --splits $PY2_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'backgroundtasks' --splits $PY2_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'taskqservice' --splits $PY2_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'reports' --splits $PY2_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            //bq reports
                            sh "gcloud app services set-traffic 'bqreports' --splits $BQREPORTS_APP_ENGINE_VERSION=1 --quiet"
                            //py3 services
                            sh "gcloud app services set-traffic 'app' --splits $PY3_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'dashboard' --splits $PY3_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            //sh "gcloud app services set-traffic 'sso' --splits $PY3_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'pricebook' --splits $PY3_SERVICE_APP_ENGINE_VERSION=1 --quiet"
                        }
                        else {  
                            error('Promote halted....')
                        }
                   }
                }               
            }  
        }      
    } 
}