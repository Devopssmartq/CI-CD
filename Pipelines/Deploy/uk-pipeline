/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
import groovy.transform.Field
@Field def IS_NODEAPPS_ENABLED
@Field def IS_PY2_ENABLED
@Field def IS_PY3_ENABLED
@Field def IS_PHRASE_TRANSLATE_ENABLED
@Field def ARR_SELECTED_SERVICE
@Field def ARR_VERIFY_SERVICE = []
@Field def PROMOTED_SERVICES = []

def getURL_Status(Map args) {
    script {
        def service_url = sh(script: "gcloud app browse --service=${args.service_name} --version=${args.version_name} --no-launch-browser --format='value(url)'", returnStdout: true).trim()
        // must call trim() to remove the default trailing newline
        final status_code = sh(script: "curl --write-out %{http_code} --silent --output /dev/null '${service_url}/${args.url_suffix}'", returnStdout: true).trim()
         
        if (status_code == "200") {
            echo "Success with Status Code : ${status_code}" 
        }
        else { 
            echo "Failed with Status Code : ${status_code}" 
        }
        return status_code
    }
}
def get_Previous_Version(Map args) {
    container('gcloud') {
        if (args.service_name.contains('cloud_run')) {
            echo "Skipping previous version check for service: ${args.service_name}"
            return null // Skipping the check for 'cloud_run' service
        } else {
            def previous_version = sh( 
                script: "gcloud app versions list --service=${args.service_name} --limit=1 --format='value(VERSION.ID)' --filter='traffic_split>0'", 
                returnStdout: true
            ).trim()
            echo "previous_version- ${previous_version}"       
            return previous_version
        }
    }
}
def is_Version_Exists(Map args) {
    script {       
        def previous_verison = get_Previous_Version(service_name: "${args.service_name}")
        def new_version = get_AppEngine_Version(app_name: "${args.app_name}")
        echo "previous_verison - ${previous_verison}"
        //echo new_version = "${args.new_version}"   
        boolean version_Exists = (previous_verison == new_version) ? true : false
        echo "version_Exists - $version_Exists, skipping the deployment for ${args.service_name}"
        return version_Exists
    }
}
def get_Storage_Object_Source_Path(Map args) { 
    def source_path = sh (
        script: "gcloud storage ls -l 'gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name}' | sed '/TOTAL/d' | sort -k 2 -r  | head -1 | awk '{print \$3}'",
        returnStdout: true
    ).trim()
    storage_path = "${source_path}"
    echo "${source_path}"
    return "${source_path}"
}
def get_AppEngine_Version(Map args) {
    def APP_ENGINE_VERSION // Define the variable outside the container block
    
    // if (params.GIT_BRANCH) {
    //     args.app_name = "${params.SERVICE_NAME}"
    // }

     container('gcloud') {
        def STORAGE_OBJECT_SOURCE_PATH = sh (
                script: "gcloud storage ls -l gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name} | cat | sed '/TOTAL/d' | sort -k 2 -r | head -1 | awk '{print \$3}'",
                returnStdout: true
        ).trim()
        APP_ENGINE_VERSION = sh (
                script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                returnStdout: true
        ).trim()
        echo "App_Engine_Version for ${args.app_name} : ${APP_ENGINE_VERSION}" 
        def fileName = APP_ENGINE_VERSION.replaceAll('\\.tar\\.gz', '')
        APP_VERSION = fileName
        echo "${fileName}"
        
        return fileName
    }
}

def promote_Service(Map args) {
    def PROMOTED_SERVICE
    if (args.service_name.contains("cloud_run")) {
        // Change directory to sq_microservices_backend before running gcloud run command
        dir('sq_microservices_backend') {
            dir('cloud_run_longrun_script'){
                PROMOTED_SERVICE = sh(
                    script: "gcloud run services update-traffic bigquerysync-${params.APP_ENGINE_PROJECT_ID} --flags-file promote_flags/${params.APP_ENGINE_PROJECT_ID}.json",
                    returnStdout: true
                ).trim()
            }    
        }
    } else {
        PROMOTED_SERVICE = sh(
            script: "gcloud app services set-traffic ${args.service_name} --splits ${args.version_name}=1 --quiet",
            returnStdout: true
        ).trim()
    }
    return "${PROMOTED_SERVICE}"
}
def Stop_Old_Version(Map args) {
    def STOPPED_VERSION
    if (args.service_name.contains("sso")) {
        if (sso_previous_version != PY3_SERVICE_APP_ENGINE_VERSION){
            STOPPED_VERSION = sh(script: "gcloud app versions stop --service=sso ${sso_previous_version} --quiet", returnStdout: true).trim()
        }    
    }
    return "${STOPPED_VERSION}"
}
def Write_To_File() {
    script {    
        def filePath = "${env.WORKSPACE}/release-${env.VERSION_NUMBER}.txt"                  
        def content = PROMOTED_SERVICES.join('\n')
        writeFile file: filePath, text: content                                            
        echo "Items written to ${filePath}"
        def data = readFile(file: "${filePath}")
        println(data)
        container('gcloud') {
            dir("${env.WORKSPACE}") {
                sh "gcloud storage cp ${filePath} gs://sqinternational-cicd.appspot.com/release_summary/released/${APP_ENGINE_PROJECT_ID}/${env.VERSION_NUMBER} --recursive"
            }
        }
    }
}
def notifyStatus() {
    office365ConnectorSend webhookUrl: "${mail_url}",
        message: "Job Name: ${Job_Name}.\n\n Build Status: ${currentBuild.currentResult}.\n\n Jenkins Build Number: ${Build_Number}.\n\n Build Server - ${APP_ENGINE_PROJECT_ID}.\n\n Services Promoted - ${PROMOTED_SERVICES.join('\n\n')}",
        status: "Deployment Status# ${currentBuild.currentResult}"
}
def runAutomation() {
    def Automation_Pipeline = params.AUTOMATION_PIPELINE
                
        if (Automation_Pipeline != 'none') {
            build job: Automation_Pipeline
        } else {
            echo "No specific job selected to trigger"
        }
}
//1. initialize the app that needs deployment
def nodeapps = [
            [key: 'controldesk'],
            [key: 'controldeskflutter'],
            [key: 'time2eat'],
            [key: 'web-ort'],
            [key: 'time2eat-flutter']
        ]
def py2_services = [
            [key: 'appservice'],
            [key: 'backgroundtasks'],
            [key: 'taskqservice'],
            [key: 'bqreports']
        ]
def py3_services = [
            [key: 'py3_default'], //international           
            [key: 'dashboard'],
            [key: 'sso'],
            [key: 'pricebook'],
            [key: 'integration'],
            [key: 'cloud_run'],
            [key: 'index'],
            [key: 'menucacheupdate']
        ]
def phrase_translate = [
            [key: 'phrase'] //INTERNATIONAL
]         
//To-Do: refactor the script blocks to use from variable definition
properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select Release Scope',
            filterLength: 1,
            filterable: false,
            name: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["sprint:selected", "preprod", "beta", "prod", "hot-fix"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def choices = ["sprint:selected", "preprod", "beta", "prod", "hot-fix"]
                        return choices
                    '''
                ]
            ]
        ],
        string(name: 'GIT_BRANCH',defaultValue: '', description: 'hotfix branch name'),
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            referencedParameters: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["smartqdemo-uk:selected"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def scope = RELEASE_SCOPE ?: "sprint" // Default to 'SPRINT' if not selected
                        def options = []
                        if (scope == "sprint") {
                            options = ["smartqdemo-uk:selected"]
                        } else if (scope == "preprod") {
                            options = ["sqpreprod-uk:selected", "sqpreprod-ie"]
                        } else if (scope == "beta") {
                            options = ["smartqprd-uk:selected"]
                        } else if (scope == "prod") {
                            options = ["smartqprd-uk:selected", "smartqprd-ie
                        } else if (scope == "hot-fix") {
                            options = ["sqpreprod-uk", "smartqprd-uk:selected", "smartqprd-ie
                        }
                        return options
                    '''
                ]
            ]
        ],       
        [$class: 'ChoiceParameter',
            choiceType: 'PT_RADIO',
            description: 'Select Deployment Type',
            filterLength: 1,
            filterable: false,
            name: 'DEPLOYMENT_TYPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["International:selected"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def choices = ["International:selected"]
                        return choices
                    '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select Service Name',
            filterLength: 1,
            filterable: false,
            name: 'SERVICE_NAME',
            referencedParameters: 'DEPLOYMENT_TYPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["All:selected","controldesk","web-ort","time2eat","time2eat-flutter","appservice","backgroundtasks","taskqservice","bqreports","dashboard","sso","py3_default","integration", "pricebook","cloud_run","index",,"phrase","menucacheupdate"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def type = DEPLOYMENT_TYPE ?: "International" 
                        def options = []
                        if (type == "International") {
                            options = ["All:selected","controldesk","web-ort","time2eat","time2eat-flutter","appservice","backgroundtasks","taskqservice","bqreports","dashboard","sso","py3_default","integration", "pricebook","cloud_run","index".,"phrase","menucacheupdate"]
                        }
                        return options
                    '''
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select the Automation_Pipeline',
            filterLength: 1,
            filterable: false,
            name: 'AUTOMATION_PIPELINE',
            referencedParameters: 'APP_ENGINE_PROJECT_ID, RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return [APP_ENGINE_PROJECT_ID + "_Critical_Sanity", "none:selected"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def scope = RELEASE_SCOPE ?: "sprint" // Default to 'SPRINT' if not selected
                        def options = []
                        if (scope == "sprint" || scope == "beta") {
                            options = []
                        } else if (APP_ENGINE_PROJECT_ID == "smartqprd-spain") {
                            options = ["Spain-Translation-Test_Suite", "none:selected"]
                        } else if (APP_ENGINE_PROJECT_ID) {
                            options = [APP_ENGINE_PROJECT_ID + "_Critical_Sanity", "none:selected"]
                        } else {
                            options = ['DefaultValue']
                        }    
                                       
                        //return options
                    '''
                ]
            ]
        ]
    ])
])
pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }
    environment {
        // Initialize a boolean flag
        INTERNATIONAL_FLAG = false
        VERSION_NUMBER = VersionNumber([
            versionNumberString: '${BUILD_DATE_FORMATTED, "yyyyMMddhhmmss"}', 
            //versionPrefix: 'v1.0.', 
            worstResultForIncrement: 'SUCCESS'
        ])
    }
    stages {
        stage('Check Deployment Type - India / International ') {
            steps {
                script {
                    // Define a list of items
                    def lstServers_India = ['smartqdemo',"sqpreprod-india", "smartqprd-india"]
                    def itemToCheck = params.APP_ENGINE_PROJECT_ID
                    // Check if exists in the list
                    if (lstServers_India.contains(itemToCheck)) {
                        echo "${itemToCheck} is in india servers list."
                        INTERNATIONAL_FLAG = false
                    } else {
                        echo "${itemToCheck} is in International servers list."
                        INTERNATIONAL_FLAG = true
                    }
                    echo "International_flag : ${INTERNATIONAL_FLAG}"
                    // Get the flag value
                    env.DEPLOYMENT_TYPE = INTERNATIONAL_FLAG ? "International" : "India" 
                    echo "Deployment-Type : ${DEPLOYMENT_TYPE}"
                }
            }
        }               //You should have a reference to config-variables-{value}.groovy, in Dashboard -> Manage Jenkins -> Managed files
        stage('Map YAMLs specific to each Service') {
            steps {
                script {                    
                    env.RELEASE_SCOPE = params.RELEASE_SCOPE
                    env.APP_ENGINE_PROJECT_ID = params.APP_ENGINE_PROJECT_ID
                    env.GIT_BRANCH = params.GIT_BRANCH
                    mail_url = 'https://cpgplc.webhook.office.com/webhookb2/6d5ff299-54f8-4bb3-911b-4ef2d419e335@cd62b7dd-4b48-44bd-90e7-e143a22c8ead/IncomingWebhook/3b95c290077440da9d684a0c498039e1/1b69cb54-bc9e-4431-98fa-5afcb910e9d4'

                    if(params.SERVICE_NAME == "All" || params.SERVICE_NAME.isEmpty())
                    {
                        def type = DEPLOYMENT_TYPE ?: "India" // Default to 'India' if not selected
                        echo "type of deplyoment is : ${type}"
                        def options = 'controldesk,web-ort,time2eat,foodbook-web,smartq-pwa,py2_default,backgroundtasks,taskqservice,reports,bqreports,dashboard,sso,app,pricebook,cloud_run,index,menucacheupdate'
                        if (type == "International") {
                            options = 'controldesk,web-ort,time2eat,time2eat-flutter,baweb,appservice,backgroundtasks,taskqservice,bqreports,dashboard,sso,py3_default,integration,time2eat-flutter,pricebook,cloud_run,index,phrase,menucacheupdate'
                        }       
                        //echo "SERVICE_NAME_LIST updated - $options"
                        ARR_SELECTED_SERVICE = "$options".split(',')                        
                    } 
                    else {
                        ARR_SELECTED_SERVICE = params.SERVICE_NAME.split(',')
                    }
                    echo "Selected Services - $ARR_SELECTED_SERVICE"

                    // To enable particular group, based on selected service
                    IS_NODEAPPS_ENABLED = ARR_SELECTED_SERVICE.any { element1 -> nodeapps.key.contains(element1) }
                    echo "IS_NODEAPPS_SELECTED - $IS_NODEAPPS_ENABLED"

                    IS_PY2_ENABLED = ARR_SELECTED_SERVICE.any { element2 ->
                        py2_services.key.contains(element2)
                    }
                    echo "IS_PY2_SELECTED - $IS_PY2_ENABLED"

                    IS_PY3_ENABLED = ARR_SELECTED_SERVICE.any { element3 ->
                        py3_services.key.contains(element3)
                    }
                    echo "IS_PY3_SELECTED - $IS_PY3_ENABLED"  

                    IS_PHRASE_TRANSLATE_ENABLED = ARR_SELECTED_SERVICE.any { element4 ->
                        phrase_translate.key.contains(element4)
                    }
                    echo "IS_PHRASE_TRANSLATE - $IS_PHRASE_TRANSLATE_ENABLED"                  
                    
                    //To get the properties from config-variables-{india/international}.groovy file
                    MY_FILE_ID = "config-variables-${DEPLOYMENT_TYPE}"
                    configFileProvider([configFile(fileId: "$MY_FILE_ID", variable: 'GroovyScript')]) {
                        load("$GroovyScript").setProperties()
                        echo "$GCS_BUCKET_NAME"
                        echo "$ENVIRONMENT"//see if you can get rid of this in all the places & use GIT_BRANCH, as both are same now
                        echo "GIT_BRANCH - $GIT_BRANCH"
                        // echo "[\"$CONTROLDESK_YAML\", \"$PWA_YAML\", \"$FOODBOOK_YAML\", \"$TIME2EAT_YAML\", \"$BAWEB_YAML\", \"$WEBORT_YAML\", \"$TIME2EAT_FLUTTER_YAML\"]"
                        // echo "[\"$APP_SERVICE_YAML\",  \"$DEFAULT_SERVICE_YAML\", \"$BACKGROUND_YAML\", \"$TASKQSERVICE_YAML\", \"$REPORTS_YAML\", \"$BQREPORTS_YAML\"]" 
                        // echo "[\"$PY3_APPMS_YAML\", \"$PY3_DASHBOARD_YAML\",  \"$PY3_SSO_YAML\", \"$PY3_PRICEBOOK_YAML\", \"$PY3_INTEGRATION_YAML\"]"                         
                    }
                }              
            }
        }
        stage('Set GCloud ProjectID') {
            steps {
                container('gcloud') {
                    echo "Selected APP_ENGINE_PROJECT_ID: ${params.APP_ENGINE_PROJECT_ID}"
                    sh "gcloud config set project ${params.APP_ENGINE_PROJECT_ID}"
                }               
            }  
        }               
        //2. Add new application block       
        stage('parallel deploy'){
            parallel{
                stage('NodeJs:Deploy Apps') { 
                    when {
                        expression { return IS_NODEAPPS_ENABLED}// Check the condition here
                    }                    
                    steps {
                        container('gcloud') {
                            script { 
                                def PWA_APP_NAME = "time2eat" 
                                if('smartq-pwa' in ARR_SELECTED_SERVICE || 'foodbook-web' in ARR_SELECTED_SERVICE || 'time2eat' in ARR_SELECTED_SERVICE || 'jumpr-pwa' in ARR_SELECTED_SERVICE || 'baweb' in ARR_SELECTED_SERVICE) {                                    
                                    configFileProvider([configFile(fileId: 'deploy-PWQ-script', targetLocation: 'deploy_time2eat.groovy')]) {
                                        TIME2EAT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'time2eat')
                                        //PWA_STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "time2eat")

                                        load("deploy_time2eat.groovy").setProperties(get_Storage_Object_Source_Path(app_name: "time2eat"))
                                    }                            
                                }
                                def parallelJobs = [:]
                                    // if controldesk in selected list , then we have to deploy flutter also                                                                     
                                if ('controldesk' in ARR_SELECTED_SERVICE ) {    
                                    configFileProvider([configFile(fileId: 'deploy-controldesk-script', targetLocation: 'deploy_controldesk.groovy')]) {
                                        CONTROLDESK_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'controldesk')
                                        //controldesk_PATH = get_Storage_Object_Source_Path(app_name: "controldesk")
                                        PREVIOUS_VERSION = get_Previous_Version(service_name: "controldesk")
                                        parallelJobs[nodeapps.find { it.key == 'controldesk' }] = {
                                            load("deploy_controldesk.groovy").setProperties(get_Storage_Object_Source_Path(app_name: "controldesk"), CONTROLDESK_APP_ENGINE_VERSION)
                                            ARR_VERIFY_SERVICE.add([service_name: 'controldesk', version_name: "$CONTROLDESK_APP_ENGINE_VERSION", url_suffix: 'control-desk/login'])
                                        }                                                                            
                                    }
                                }                               
                                if ('controldesk' in ARR_SELECTED_SERVICE ) {    
                                    configFileProvider([configFile(fileId: 'deploy-controldeskflutter-script', targetLocation: 'deploy_controldeskflutter.groovy')]) {
                                        CONTROLDESK_FLUTTER_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'controldeskflutter')
                                        //controldeskflutter_PATH = get_Storage_Object_Source_Path(app_name: "controldeskflutter")
                                        PREVIOUS_VERSION = get_Previous_Version(service_name: "control-desk-flutter")
                                        parallelJobs[nodeapps.find { it.key == 'controldeskflutter' }] = {
                                            load("deploy_controldeskflutter.groovy").setProperties(get_Storage_Object_Source_Path(app_name: "controldeskflutter"), CONTROLDESK_FLUTTER_APP_ENGINE_VERSION)
                                            ARR_VERIFY_SERVICE.add([service_name: 'control-desk-flutter', version_name: "$CONTROLDESK_FLUTTER_APP_ENGINE_VERSION", url_suffix: 'control-desk-v2/login'])
                                        }                                                                                                                              
                                    }
                                }    
                                if ('time2eat' in ARR_SELECTED_SERVICE ) {
                                    TIME2EAT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'time2eat')
                                    PREVIOUS_VERSION = get_Previous_Version(service_name: "time2eat")
                                    parallelJobs[nodeapps.find { it.key == 'time2eat' }] = {
                                        dir("${PWA_APP_NAME}-latest") {                                           
                                            sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet $TIME2EAT_YAML --no-promote"
                                        }
                                        ARR_VERIFY_SERVICE.add([service_name: 'time2eat', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'time2eat/main'])   
                                    }
                                }                                                                                                                                   
                                if ('web-ort' in ARR_SELECTED_SERVICE ) {                                                                                               
                                    configFileProvider([configFile(fileId: 'deploy-groovy-script', targetLocation: 'deploy_web-ort.groovy')]) {
                                        WEBORT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'web-ort')
                                        //web_ort_PATH = get_Storage_Object_Source_Path(app_name: "web-ort")
                                        PREVIOUS_VERSION = get_Previous_Version(service_name: "web-ort")
                                        parallelJobs[nodeapps.find { it.key == 'web-ort' }] = {
                                            load("deploy_web-ort.groovy").setProperties(get_Storage_Object_Source_Path(app_name: "web-ort"), WEBORT_APP_ENGINE_VERSION)
                                            ARR_VERIFY_SERVICE.add([service_name: 'web-ort', version_name: "$WEBORT_APP_ENGINE_VERSION", url_suffix: 'web-ort/main'])                                           
                                        }
                                    }
                                }    
                                //if (params.APP_ENGINE_PROJECT_ID.contains("-uk")) {                                    
                                    // if ('time2eat-flutter' in ARR_SELECTED_SERVICE ) {                                                                                                                                           
                                    //     configFileProvider([configFile(fileId: 'deploy-time2eat-flutter-script', targetLocation: 'deploy_time2eat-flutter.groovy')]) {
                                    //         TIME2EAT_FLUTTER_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'time2eat-flutter')
                                    //         //STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "time2eat-flutter")
                                    //         PREVIOUS_VERSION = get_Previous_Version(service_name: "time2eat-flutter")
                                    //         parallelJobs[nodeapps.find { it.key == 'time2eat-flutter' }] = {
                                    //             load("deploy_time2eat-flutter.groovy").setProperties(get_Storage_Object_Source_Path(app_name: "time2eat-flutter"), TIME2EAT_FLUTTER_APP_ENGINE_VERSION)
                                    //             ARR_VERIFY_SERVICE.add([service_name: 'time2eat-flutter', version_name: "$TIME2EAT_FLUTTER_APP_ENGINE_VERSION", url_suffix: 'time2eat-v2/'])                                           
                                    //         }                                                                                                                                                                                                           
                                    //     }
                                    // }
                                //}    
                                //2.1 Add new application block here
                                parallel(parallelJobs)
                            }
                        }
                    }
                }
                stage('Py2:Deploy Backend Services') {
                    when {
                        expression { return IS_PY2_ENABLED} // Check the condition here
                    }          
                    stages {
                        stage('Py2:Clone smartq-backend') { 
                            steps { 
                                script {
                                    PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')
                                    sh "mkdir -p smartq-cloud-backend"
                                    dir('smartq-cloud-backend') {  
                                        checkout([$class: 'GitSCM', 
                                            branches: [[name: "${PY2_SERVICE_APP_ENGINE_VERSION}"]], 
                                            doGenerateSubmoduleConfigurations: false, 
                                            extensions: [[$class: 'CleanCheckout']], 
                                            userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/smartq-cloud-backend.git', credentialsId: 'git/devops/new',]]]) 
                                        dir ('py3_project/py3_backend/bqreports/admindashboard/') {
                                                sh 'rm -rf ./{*,.*}'
                                        }
                                        dir ('py3_project/py3_backend/bqreports/reports/') {
                                            sh 'rm -rf ./{*,.*}'
                                        }
                                        dir ('eWallet') {
                                            sh 'rm -rf ./{*,.*}'
                                        }     
                                        sh 'ls -lrt'
                                    }
                                }
                            } 
                        }
                        stage('Py2:Copy build output - ewallet, admin & vendor dash-board') {
                            steps {                
                                dir ('smartq-cloud-backend') {
                                    container('gcloud') {
                                        script {  
                                            sh "echo ${WORKSPACE}"
                                            APP_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'ewallet')
                                            ADMIN_DASHBOARD_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'generic-admin-dashboard')
                                            BQREPORTS_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'vendor-dashboard')
                                            //1. copy generic-admin-dashboard - making it ready for deployment
                                            def APP_NAME = "generic-admin-dashboard" 
                                            def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                            sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive"
                                            
                                            //2. copy vendor-dashboard - making it ready for deployment
                                            APP_NAME = "vendor-dashboard" 
                                            STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                            sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive"
                                            
                                            //3.copy ewallet - making it ready for deployment
                                            APP_NAME = "ewallet" 
                                            STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                            sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive"
                                            
                                            dir ('py3_project/py3_backend/bqreports/admindashboard') {
                                                sh 'ls -lrt'
                                                sh 'rm -rf ./{*,.*}'
                                                sh "tar -xzvf ${ADMIN_DASHBOARD_APP_ENGINE_VERSION}.tar.gz" 
                                                sh "cp -r build/* ."
                                                sh " rm -r build"
                                                sh "ls"                                               
                                            }
                                            dir ('py3_project/py3_backend/bqreports/reports') {
                                                sh 'ls -lrt'
                                                sh "tar -xzvf ${BQREPORTS_APP_ENGINE_VERSION}.tar.gz"                                             
                                            }
                                            dir ('eWallet') {
                                                sh 'ls -lrt'
                                                sh 'rm -rf ./{*,.*}'
                                                sh "tar -xzvf ${APP_SERVICE_APP_ENGINE_VERSION}.tar.gz" 
                                                sh "cp -r build/* ."
                                                sh " rm -r build"
                                                sh "ls"                              
                                            }
                                        }
                                    }
                                }
                            }                           
                        }
                        stage('Py2:Deploy Backend Services') {
                            steps {
                                container('gcloud') {
                                    script {
                                        def parallelJobs = [:]   
                                        if ('appservice' in ARR_SELECTED_SERVICE ) {
                                           PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')
                                           PREVIOUS_VERSION = get_Previous_Version(service_name: "appservice")
                                            parallelJobs[py2_services.find { it.key == 'appservice' }] = {
                                                dir ('smartq-cloud-backend'){
                                                    sh "ls *.yaml"
                                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $APP_SERVICE_YAML --no-promote"
                                                }
                                                ARR_VERIFY_SERVICE.add([service_name: 'appservice', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'eWallet/transactions'])  
                                            }
                                        }
                                        if ('backgroundtasks' in ARR_SELECTED_SERVICE ) {
                                            PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')
                                            PREVIOUS_VERSION = get_Previous_Version(service_name: "backgroundtasks")
                                            parallelJobs[py2_services.find { it.key == 'backgroundtasks' }] = {
                                                dir ('smartq-cloud-backend') {                                                    
                                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $BACKGROUND_YAML --no-promote"
                                                }
                                                ARR_VERIFY_SERVICE.add([service_name: 'backgroundtasks', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload'])  
                                            }
                                        }
                                        if ('taskqservice' in ARR_SELECTED_SERVICE ) {
                                            PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')
                                            PREVIOUS_VERSION = get_Previous_Version(service_name: "taskqservice")
                                            parallelJobs[py2_services.find { it.key == 'taskqservice' }] = {
                                                dir ('smartq-cloud-backend'){                                                    
                                                    sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $TASKQSERVICE_YAML --no-promote"
                                                }
                                                ARR_VERIFY_SERVICE.add([service_name: 'taskqservice', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload'])                                                              
                                            }
                                        }
                                        //2.1 Add new service block here, if there is any to be added
                                        parallel(parallelJobs)
                                    }
                                }
                            }
                        }
                        stage('Py2:Deploy BQ Reports') {
                            steps {
                                script {
                                    container('gcloud') {                                        
                                        def py2_bqreports = [:]
                                        if ('bqreports' in ARR_SELECTED_SERVICE ) {
                                            PY2_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')
                                            PREVIOUS_VERSION = get_Previous_Version(service_name: "bqreports")
                                            py2_bqreports[py2_services.find { it.key == 'bqreports' }] = {
                                                dir ('smartq-cloud-backend') {                                                    
                                                    dir ('py3_project') {
                                                        sh "ls *.yaml"                                                        
                                                        sh "gcloud app deploy --version=$PY2_SERVICE_APP_ENGINE_VERSION --quiet $BQREPORTS_YAML --no-promote"
                                                    }
                                                    ARR_VERIFY_SERVICE.add([service_name: 'bqreports', version_name: "$PY2_SERVICE_APP_ENGINE_VERSION", url_suffix: 'admindashboard/'])  
                                                }
                                            }
                                        }
                                        //2.1 Add new service block here, if there is any to be added
                                        parallel(py2_bqreports)                        
                                    }               
                                }
                            }
                        }
                    }
                }
                stage('Py3:Deploy Micro Services') {
                    when {
                        expression { return IS_PY3_ENABLED} // Check the condition here
                    }           
                    stages {
                        stage('Py3:Clone') { 
                            steps { 
                                script {
                                    PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend')
                                    sh "mkdir -p sq_microservices_backend"
                                    dir('sq_microservices_backend') {                        
                                        checkout([$class: 'GitSCM', 
                                            branches: [[name: "${PY3_SERVICE_APP_ENGINE_VERSION}"]], 
                                            doGenerateSubmoduleConfigurations: false, 
                                            extensions: [[$class: 'CleanCheckout']], 
                                            userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/sq_microservices_backend.git', credentialsId: 'git/devops/new',]]])
                                                    
                                    sh 'ls -lrt'
                                    }
                                }    
                            } 
                        }
                        stage('Py3:Deploy') {
                            steps {
                                container('gcloud') {
                                    script {
                                        sh "echo ${WORKSPACE}"
                                        def parallelJobs = [:]
                                        if ('py3_default' in ARR_SELECTED_SERVICE ) {
                                            PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend')
                                            PREVIOUS_VERSION = get_Previous_Version(service_name: "default") 
                                            parallelJobs[py3_services.find { it.key == 'py3_default' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'cp -r commonlib appms'
                                                    dir ('appms') {
                                                        sh "ls *.yaml"                                                        
                                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_APPMS_YAML --no-promote"
                                                    }                                           
                                                    //py3 -app : international
                                                    ARR_VERIFY_SERVICE.add([service_name: 'default', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: ''])  
                                                }                             
                                            }
                                        }
                                        if ('dashboard' in ARR_SELECTED_SERVICE ) {
                                            PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                            PREVIOUS_VERSION = get_Previous_Version(service_name: "dashboard")
                                            parallelJobs[py3_services.find { it.key == 'dashboard' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'cp -r commonlib dashboardms'
                                                    dir ('dashboardms') {
                                                        sh "ls *.yaml"                                        
                                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_DASHBOARD_YAML --no-promote"
                                                    }
                                                    //py3 services
                                                    ARR_VERIFY_SERVICE.add([service_name: 'dashboard', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v2/bck/dummy'])                                                                     
                                                }                               
                                            }
                                        }
                                        if ('sso' in ARR_SELECTED_SERVICE ) {
                                            PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                            PREVIOUS_VERSION = get_Previous_Version(service_name: "sso")
                                            sso_previous_version = PREVIOUS_VERSION
                                            parallelJobs[py3_services.find { it.key == 'sso' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'cp -r commonlib sso_flex'
                                                    dir ('sso_flex') {
                                                        sh "ls *.yaml"                                                        
                                                        sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_SSO_YAML --no-promote"
                                                    }
                                                    ARR_VERIFY_SERVICE.add([service_name: 'sso', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v2/app/sso/_health_check'])  
                                                }                                 
                                            }
                                        }
                                        //if (params.APP_ENGINE_PROJECT_ID.contains("-uk")) {
                                            if('pricebook' in ARR_SELECTED_SERVICE) {// ! For India only - Skip this when the condition is false
                                                PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend')
                                                PREVIOUS_VERSION = get_Previous_Version(service_name: "pricebook")
                                                parallelJobs[py3_services.find { it.key == 'pricebook' }] = {
                                                    dir ('sq_microservices_backend') {
                                                        sh 'cp -r commonlib pricebook'
                                                        dir ('pricebook') {
                                                            sh "ls *.yaml"
                                                            sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_PRICEBOOK_YAML --no-promote"
                                                        }                                                        
                                                    } 
                                                    ARR_VERIFY_SERVICE.add([service_name: 'pricebook', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: 'v1/pricebook/category/search?categoryname=1'])                                                                                                                                                                   
                                                }                                                                                                                
                                            }
                                        //}  
                                        //if (params.APP_ENGINE_PROJECT_ID.contains("-uk")) {  
                                            if(INTERNATIONAL_FLAG && 'integration' in ARR_SELECTED_SERVICE ) {// 
                                                PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                                PREVIOUS_VERSION = get_Previous_Version(service_name: "integration")
                                                parallelJobs[py3_services.find { it.key == 'integration' }] = {
                                                    dir ('sq_microservices_backend') {
                                                        sh 'cp -r commonlib appms'
                                                        dir ('appms') {
                                                            sh "ls *.yaml"
                                                            sh "gcloud app deploy --version=$PY3_SERVICE_APP_ENGINE_VERSION --quiet $PY3_INTEGRATION_YAML --no-promote"
                                                        }
                                                    }        
                                                    ARR_VERIFY_SERVICE.add([service_name: 'integration', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: ''])                                                                                                                                                                                                                                                                                                                                                                                       
                                                }
                                            }
                                        //} 
                                        if ('cloud_run' in ARR_SELECTED_SERVICE ) {
                                            PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                            parallelJobs[py3_services.find { it.key == 'cloud_run' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'ls'
                                                    dir ('cloud_run_longrun_script') {
                                                        sh "ls"                                                        
                                                        sh "gcloud builds submit --flags-file build_flags/${params.APP_ENGINE_PROJECT_ID}.json"
                                                        sh "gcloud run deploy bigquerysync-${params.APP_ENGINE_PROJECT_ID} --flags-file deploy_flags/${params.APP_ENGINE_PROJECT_ID}.json --no-traffic"
                                                    }

                                                    ARR_VERIFY_SERVICE.add([service_name: 'cloud_run', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: '']) 
                                                }                                 
                                            }
                                        } 
                                        if ('menucacheupdate' in ARR_SELECTED_SERVICE ) {
                                            PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                            parallelJobs[py3_services.find { it.key == 'menucacheupdate' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'ls'
                                                    //if (params.APP_ENGINE_PROJECT_ID.contains("-india")) {
                                                        dir ('menucacheupdate') {
                                                            sh "ls"                                                        
                                                            sh "gcloud builds submit --flags-file build_flags/${params.APP_ENGINE_PROJECT_ID}.json"
                                                            sh "gcloud run deploy menucacheupdate --flags-file deploy_flags/${params.APP_ENGINE_PROJECT_ID}.json"
                                                        }
                                                    //}
                                                    //ARR_VERIFY_SERVICE.add([service_name: 'menucacheupdate', version_name: "$PY3_SERVICE_APP_ENGINE_VERSION", url_suffix: '']) 
                                                }                                 
                                            }
                                        }   
                                        if ('index' in ARR_SELECTED_SERVICE ) {
                                            PY3_SERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                            parallelJobs[py3_services.find { it.key == 'index' }] = {
                                                dir ('sq_microservices_backend') {
                                                    sh 'ls'
                                                    dir ('dispatch') {
                                                        sh "ls"                                                        
                                                        sh "gcloud app deploy --quiet index.yaml"
                                                        sh "gcloud app deploy --quiet queue.yaml"
                                                    } 
                                                }                                 
                                            }
                                        }            
                                        //2.1 Add new service block here, if there is any to be added
                                        parallel(parallelJobs)
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Pharse_translate:Deploy pharse service') {
                    when {
                        expression { return IS_PHRASE_TRANSLATE_ENABLED} // Check the condition here
                    }           
                    stages {
                        stage('Pharse_translate:Clone') { 
                            steps { 
                                script {
                                    PHRASE_TRANSLATE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'phrase_translate')
                                    sh "mkdir -p phrase_translate"
                                    dir('phrase_translate') {                        
                                        checkout([$class: 'GitSCM', 
                                            branches: [[name: "${PHRASE_TRANSLATE_APP_ENGINE_VERSION}"]], 
                                            doGenerateSubmoduleConfigurations: false, 
                                            extensions: [[$class: 'CleanCheckout']], 
                                            userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/phrase_translate.git', credentialsId: 'git/devops/new',]]])
                                                    
                                    sh 'ls -lrt'
                                    }
                                }    
                            } 
                        }
                        stage('Pharse_translate:Deploy') {
                            steps {
                                container('gcloud') {
                                    script {
                                        sh "echo ${WORKSPACE}"
                                        def parallelJobs = [:]
                                        if ('phrase' in ARR_SELECTED_SERVICE ) {
                                            PHRASE_TRANSLATE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'phrase_translate')
                                            PREVIOUS_VERSION = get_Previous_Version(service_name: "phrase") 
                                            parallelJobs[phrase_translate.find { it.key == 'phrase' }] = {
                                                dir ('phrase_translate') {
                                                    //sh 'cp -r commonlib appms'
                                                    //dir ('appms') {
                                                        sh "ls *.yaml"                                                        
                                                        sh "gcloud app deploy --version=$PHRASE_TRANSLATE_APP_ENGINE_VERSION --quiet $PY3_APPMS_YAML --no-promote"
                                                    //}                                           
                                                    //py3 -app : india
                                                    ARR_VERIFY_SERVICE.add([service_name: 'phrase', version_name: "$PHRASE_TRANSLATE_APP_ENGINE_VERSION", url_suffix: ''])  
                                                }                             
                                            }
                                        }              
                                        //2.1 Add new service block here, if there is any to be added
                                        parallel(parallelJobs)
                                    }
                                }
                            }
                        }
                    }
                }
            }    
        }
        stage ('Check URL Status')  {
            steps {
                container('gcloud') {                    
                    script {                        
                        for (item in ARR_VERIFY_SERVICE)   
                        {
                            item.status = getURL_Status(service_name: "${item.service_name}", version_name: "${item.version_name}", url_suffix: "${item.url_suffix}")                            
                            item.previous_version = get_Previous_Version(service_name: "${item.service_name}") 
                            item.new_version = "${item.version_name}"
                        }
                        println "result of verify service: ${ARR_VERIFY_SERVICE}"                         
                    }
                }
            }
        }     
        stage('Promote') {
           steps {
                container('gcloud') {                    
                    script {                        
                        def failed_url_count = ARR_VERIFY_SERVICE.findAll{ row -> row.status != '200'}.size()
                        echo "failed_url_count - $failed_url_count"
                        if (failed_url_count == 0) {
                            for (item in ARR_VERIFY_SERVICE)   
                            {                           
                                if (item.status == "200") {
                                    echo "promoting - ${item.service_name}"
                                    promote_Service(service_name: "${item.service_name}", version_name: "${item.version_name}")
                                    PROMOTED_SERVICES.add(item)
                                }                                                   
                            }
                            //method/logic to write the array to a file
                            Write_To_File()
                        }
                        else {  
                            error('Promote halted....')
                        }
                        
                        if ('sso' in ARR_SELECTED_SERVICE) {
                            Stop_Old_Version(service_name: 'sso')
                        }
                    }
                }               
            }  
        }      
    }       
    post{
        always{
            script {
                notifyStatus()
            }
        }
        success{
            script{
                runAutomation()
            }
        }
    }
}
