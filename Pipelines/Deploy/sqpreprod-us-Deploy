/* groovylint-disable CompileStatic */
// Uses Declarative syntax to run commands inside a container.
def getURL_Status(Map args) {
    script {
        def service_url = sh(script: "gcloud app browse --service=${args.service_name} --version=${args.version_name} --no-launch-browser --format='value(url)'", returnStdout: true).trim()
        // must call trim() to remove the default trailing newline
        final status_code = sh(script: "curl --write-out %{http_code} --silent --output /dev/null '${service_url}/${args.url_suffix}'", returnStdout: true).trim()
        echo status_code

        if (status_code == "200") {
            echo "Success with Status Code : ${status_code}" 
        }
        else { 
            FAILED_URL_STATUS_COUNT = (FAILED_URL_STATUS_COUNT.toInteger() + 1).toString()
            echo "Failed URL count : ${FAILED_URL_STATUS_COUNT}"
        }
    }
}

def get_Storage_Object_Source_Path(Map args) { 
    def source_path = sh (
        script: "gcloud storage ls gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name} | sort --ignore-case -rV | head -n 1",
        returnStdout: true
    ).trim()

    return "${source_path}"
}

def get_AppEngine_Version(Map args) {
        def STORAGE_OBJECT_SOURCE_PATH = sh (
                script: "gcloud storage ls gs://${GCS_BUCKET_NAME}/${ENVIRONMENT}/${args.app_name} | sort --ignore-case -rV | head -n 1",
                returnStdout: true
        ).trim()
                                           
        def APP_ENGINE_VERSION = sh (
                script: "basename ${STORAGE_OBJECT_SOURCE_PATH}",
                returnStdout: true
        ).trim().split('@')[1]

        echo "App_Engine_Version for ${args.app_name} : ${APP_ENGINE_VERSION}"       
        return "${APP_ENGINE_VERSION}"
}

pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"
       
          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }

    environment {
        FAILED_URL_STATUS_COUNT = '0'

        CONTROLDESK_APP_ENGINE_VERSION = ''
        TIME2EAT_APP_ENGINE_VERSION = ''
        WEBORT_APP_ENGINE_VERSION = ''

        APPSERVICE_APP_ENGINE_VERSION = ''
        BACKGROUND_APP_ENGINE_VERSION = ''
        TASKQSERVICE_APP_ENGINE_VERSION = ''
        BQREPORTS_APP_ENGINE_VERSION = ''

        DEFAULT_APP_ENGINE_VERSION = ''
        DASHBOARD_APP_ENGINE_VERSION = ''
        SSO_APP_ENGINE_VERSION = ''
    }
   
    stages {
        //You should have a reference to env_vars.groovy, in Dashboard -> Manage Jenkins -> Managed files
        stage('Get Environment Specific Variables') {
            steps {
                configFileProvider([configFile(fileId: 'env-vars-sqpreprod-us', variable: 'GroovyScript')]) {
                    script {
                        load("$GroovyScript").setProperties()
                        echo "${APP_ENGINE_PROJECT_ID}"
                        echo "${GCS_BUCKET_NAME}"
                        echo "${ENVIRONMENT}"
                    }
                }
            }
        }
        stage('Set GCloud ProjectID') {
           steps {
                container('gcloud') {
                    sh "gcloud config set project $APP_ENGINE_PROJECT_ID"
                }               
            }  
        }      
        stage('Deploy NodeJS Apps') {
            steps {
                parallel (
                    controldesk: {
                            container('gcloud') {
                                script {
                                    def APP_NAME = "controldesk"
                                    sh "mkdir -p ${APP_NAME}-latest" 

                                    def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest/ --recursive"
                                    
                                    CONTROLDESK_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'controldesk')
                                    def YAML = 'app.yaml'
                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$CONTROLDESK_APP_ENGINE_VERSION --quiet $YAML --no-promote"
                                    }                                    
                                }
                            }
                    },
                    time2eat: {
                        container('gcloud') {                           
                            script {
                                    def APP_NAME = "time2eat"
                                    sh "mkdir -p ${APP_NAME}-latest"

                                    def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                    sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                    
                                    def YAML1 = 'time2eat.yaml'
                                    def YAML2 = 'baweb.yaml'
                                    TIME2EAT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'time2eat')
                                    dir("${APP_NAME}-latest") {
                                        sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet ${YAML1} --no-promote"
                                        sh "gcloud app deploy --version=$TIME2EAT_APP_ENGINE_VERSION --quiet ${YAML2} --no-promote"
                                    }                                    
                            }
                        }
                    },
                    webORT: {
                        container('gcloud') {                            
                            script {
                                def APP_NAME = "web-ort"
                                sh "mkdir -p ${APP_NAME}-latest" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/${APP_NAME}-latest --recursive"
                                
                                WEBORT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'web-ort')                                
                                def YAML = 'app.yaml'   
                                dir("${APP_NAME}-latest") {
                                    sh "gcloud app deploy --version=$WEBORT_APP_ENGINE_VERSION --quiet $YAML --no-promote"
                                }                                            
                            }
                        }
                    }
                ) 
            }
        }
        stage('Clone smartq-backend') { 
            steps { 
                sh "mkdir -p smartq-cloud-backend"
                dir('smartq-cloud-backend') {                        
                    git branch: 'preprodsetup-uk',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/smartq-cloud-backend.git'

                dir ('py3_project/py3_backend/bqreports/admindashboard/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('py3_project/py3_backend/bqreports/reports/'){
                        sh 'rm -rf ./{*,.*}'
                    }
                dir ('eWallet'){
                        sh 'rm -rf ./{*,.*}'
                    }     
                sh 'ls -lrt'
                }
            } 
        }
        stage('copy build output - ewallet, admin & vendor dash-board') {
            steps {                
                dir ('smartq-cloud-backend') {
                    container('gcloud') {
                        sh "echo ${WORKSPACE}"
                        script {  
                                def APP_NAME = "generic-admin-dashboard" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/admindashboard --recursive"
                        }
                        
                        script {  
                                def APP_NAME = "vendor-dashboard" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/py3_project/py3_backend/bqreports/reports --recursive"
                        }

                        script {  
                                def APP_NAME = "ewallet" 
                                def STORAGE_OBJECT_SOURCE_PATH = get_Storage_Object_Source_Path(app_name: "${APP_NAME}")
                                sh "gcloud storage cp ${STORAGE_OBJECT_SOURCE_PATH}* ${WORKSPACE}/smartq-cloud-backend/eWallet --recursive"
                        }        

                        dir ('py3_project/py3_backend/bqreports/admindashboard') {
                            sh 'ls -lrt'
                        }
                        dir ('py3_project/py3_backend/bqreports/reports') {
                            sh 'ls -lrt'
                        }
                        dir ('eWallet') {
                            sh 'ls -lrt'
                        }
                    }
                }
            }
        }
        stage('Deploy Smartq Backend') {
            steps {
                parallel (
                    appservice: {
                        container('gcloud') {
                            script {
                                APPSERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'ewallet')                                
                                dir ('smartq-cloud-backend'){
                                    sh "ls *.yaml"
                                    sh "gcloud app deploy --version=$APPSERVICE_APP_ENGINE_VERSION --quiet time2eat_appservice.yaml --no-promote"
                                }
                            }                                
                        }
                    },
                    backgroundtasks: {
                        container('gcloud') {
                            script {
                                BACKGROUND_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')                                
                                dir ('smartq-cloud-backend') {
                                    sh "gcloud app deploy --version=$BACKGROUND_APP_ENGINE_VERSION --quiet background.yaml --no-promote"
                                }                                
                            }               
                        }
                    },
                    taskqservice: {
                        container('gcloud') {
                            script {
                                TASKQSERVICE_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'smartq-cloud-backend')                                
                                dir ('smartq-cloud-backend'){
                                    sh "gcloud app deploy --version=$TASKQSERVICE_APP_ENGINE_VERSION --quiet taskqservice.yaml --no-promote"
                                }                                                           
                                    
                            }      
                        }
                    }   
                )
            }
        }
        stage('Deploy to BQ Reports') {
            steps {
                container('gcloud') {
                    script {
                        BQREPORTS_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'vendor-dashboard')                                
                        dir ('smartq-cloud-backend') {
                            dir ('py3_project') {
                                sh "ls *.yaml"
                                sh "gcloud app deploy --version=$BQREPORTS_APP_ENGINE_VERSION --quiet bqreports.yaml --no-promote"
                            }
                        }                        
                    }
                }               
            }
        }
        stage('Clone sq_microservices_backend') { 
            steps { 
                sh "mkdir -p sq_microservices_backend"
                dir('sq_microservices_backend') {                        
                    git branch: 'preprodsetup',
                    credentialsId: '205fee1d-5909-4587-abe4-8c50bdc37556',
                    url: 'https://vrp63531@bitbucket.org/bottlelabtech/sq_microservices_backend.git'
                                   
                sh 'ls -lrt'
                }
            } 
        }
        stage('Deploy Microservices') {
            steps {
                parallel (
                    appms: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"
                            
                            script {
                                DEFAULT_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib appms'
                                    dir ('appms') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$DEFAULT_APP_ENGINE_VERSION --quiet sqpreprod-us.yaml --no-promote"
                                    }
                                }                                
                            }
                        } 
                    },
                    dashboardms: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"
                            script {
                                DASHBOARD_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib dashboardms'
                                    dir ('dashboardms') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$DASHBOARD_APP_ENGINE_VERSION --quiet sqpreprod-us.yaml --no-promote"
                                    }                                  
                                }
                            }
                        }
                    },
                    sso_flex: {
                        container('gcloud') {
                            sh "echo ${WORKSPACE}"              
                            script {
                                SSO_APP_ENGINE_VERSION = get_AppEngine_Version(app_name: 'sq_microservices_backend') 
                                dir ('sq_microservices_backend') {
                                    sh 'cp -r commonlib sso_flex'
                                    dir ('sso_flex') {
                                        sh "ls *.yaml"
                                        sh "gcloud app deploy --version=$SSO_APP_ENGINE_VERSION --quiet app.yaml --no-promote"
                                    }
                                }                   
                            }
                        }
                    }              
                )
            }
        }
        stage ('Check URL Status')  {
            steps {
                container('gcloud') {                    
                    script {
                        getURL_Status(service_name: 'controldesk', version_name: "$CONTROLDESK_APP_ENGINE_VERSION", url_suffix: 'control-desk/login')
                        getURL_Status(service_name: 'time2eat', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'time2eat/main')
                        getURL_Status(service_name: 'baweb', version_name: "$TIME2EAT_APP_ENGINE_VERSION", url_suffix: 'baweb/main')                        
                        getURL_Status(service_name: 'web-ort', version_name: "$WEBORT_APP_ENGINE_VERSION", url_suffix: 'web-ort/main')                        
                        
                        getURL_Status(service_name: 'appservice', version_name: "$APPSERVICE_APP_ENGINE_VERSION", url_suffix: 'eWallet/transactions')                        
                        getURL_Status(service_name: 'backgroundtasks', version_name: "$BACKGROUND_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload')                        
                        getURL_Status(service_name: 'taskqservice', version_name: "$TASKQSERVICE_APP_ENGINE_VERSION", url_suffix: 'dummycheckupload')                        
                        getURL_Status(service_name: 'bqreports', version_name: "$BQREPORTS_APP_ENGINE_VERSION", url_suffix: 'reports/index.html#/')

                        getURL_Status(service_name: 'default', version_name: "$DEFAULT_APP_ENGINE_VERSION", url_suffix: '')                        
                        getURL_Status(service_name: 'dashboard', version_name: "$DASHBOARD_APP_ENGINE_VERSION", url_suffix: 'v2/bck/dummy')                        
                        getURL_Status(service_name: 'sso', version_name: "$SSO_APP_ENGINE_VERSION", url_suffix: 'v2/app/sso/_health_check')                        
                    }
                }
             }
        }       
        stage('Promote') {
          steps {
                container('gcloud') {                    
                    script { 
                        env.failed_url_count = FAILED_URL_STATUS_COUNT.toInteger().toString()
                        echo "Failed URL count : ${env.failed_url_count}"                  
                        if (env.failed_url_count == "0") { 
                            sh "gcloud app services set-traffic 'controldesk' --splits $CONTROLDESK_APP_ENGINE_VERSION=1 --quiet" 
                            sh "gcloud app services set-traffic 'time2eat' --splits $TIME2EAT_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'baweb' --splits $TIME2EAT_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'web-ort' --splits $WEBORT_APP_ENGINE_VERSION=1 --quiet"
                            
                            sh "gcloud app services set-traffic 'appservice' --splits $APPSERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'taskqservice' --splits $TASKQSERVICE_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'backgroundtasks' --splits $BACKGROUND_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'bqreports' --splits $BQREPORTS_APP_ENGINE_VERSION=1 --quiet"

                            sh "gcloud app services set-traffic 'default' --splits $DEFAULT_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'dashboard' --splits $DASHBOARD_APP_ENGINE_VERSION=1 --quiet"
                            sh "gcloud app services set-traffic 'sso' --splits $SSO_APP_ENGINE_VERSION=1 --quiet"
                        }
                        else {  
                            error('Promote halted....')
                        }
                  }
                }               
            }  
        }      
    } 
}