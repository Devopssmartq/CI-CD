properties([
    parameters([
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select the Project_ID',
            filterLength: 1,
            filterable: false,
            name: 'APP_ENGINE_PROJECT_ID',
            //referencedParameters: 'RELEASE_SCOPE',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: 'return ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "sqpentest", "sqinternational-cicd", "smartqdemo:selected"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true, // should be true, otherwise you have to manually approve the script
                    script: '''
                        def scope = RELEASE_SCOPE ?: "sprint" // Default to 'SPRINT' if not selected
                        def options = []
                        if (scope == "sprint") {
                            options = ["smartqdemo-au", "smartqdemo-de", "smartqdemo-hk", "smartqdemo-nz", "smartqdemo-us", "smartqdemo-uk", "sqpentest", "sqinternational-cicd", "smartqdemo:selected"]
                        } else if (scope == "preprod") {
                            options = ["sqpreprod-india", "sqpreprod-uk", "sqpreprod-us:selected"]
                        } else if (scope == "beta") {
                            options = ["smartqprd-india", "smartqprd-uk", "smartqprd-us:selected"]
                        } else if (scope == "prod") {
                            options = [ "smartqprd-au", "smartqprd-be", "smartqprd-chi", "smartqprd-cn", "smartqprd-de", "smartqprd-fi", "smartqprd-hk", "smartqprd-ie", "smartqprd-india",
                                        "smartqprd-it", "smartqprd-jp", "smartqprd-mex", "smartqprd-nl",  "smartqprd-nz", "smartqprd-sng", "smartqprd-spain", "smartqprd-uae", "smartqprd-uk", "smartqprd-us:selected
                        } else if (scope == "hot-fix") {
                            options = [ "sqpreprod-india", "sqpreprod-uk", "sqpreprod-us:selected", "smartqprd-au", "smartqprd-be", "smartqprd-chi", "smartqprd-cn", "smartqprd-de", "smartqprd-fi", "smartqprd-hk",
                                        "smartqprd-ie",  "smartqprd-india", "smartqprd-it", "smartqprd-jp", "smartqprd-mex", "smartqprd-nl", "smartqprd-nz", "smartqprd-sng", "smartqprd-spain",  "smartqprd-uae",
                                        "smartqprd-uk", "smartqprd-us
                        }
                        return options
                    '''
                ]
            ]
        ],       
        string(name: 'MIGRATE_TRAFFIC',defaultValue: '', description: 'Enter the txt file'),
    ])
])

   
pipeline{
    agent{
        kubernetes{
            yaml '''
        apiVersion: v1
        kind: Pod
        environment:
            name: "NODE_OPTIONS"
            value: "--max-old-space-size=4096"
        spec:
          containers:
          - name: jnlp  
            resources:
              requests:
                memory: "2048Mi"
                cpu: "500m"
              limits:
                memory: "4096Mi"
                cpu: "1000m"

          - name: gcloud
            image: google/cloud-sdk:latest
            command:
            - cat
            tty: true
        '''        
        }
    }
    environment {
        // Initialize a boolean flag
        INTERNATIONAL_FLAG = false
        VERSION_NUMBER = VersionNumber([
            versionNumberString: '${BUILD_DATE_FORMATTED, "yyyyMMddhhmmss"}', 
            //versionPrefix: 'v1.0.', 
            worstResultForIncrement: 'SUCCESS'
        ])
    }
    stages {
        stage ('Set the Gcloud_ProjectID'){
            steps{
                container('gcloud') {
                    echo "Selected APP_ENGINE_PROJECT_ID: ${params.APP_ENGINE_PROJECT_ID}"
                    sh "gcloud config set project ${params.APP_ENGINE_PROJECT_ID}"
                }
            }
        }
        stage('Migrate_the_traffic') {
            steps {
                container('gcloud') {
                    script {
                        sh "gcloud storage cp  gs://sqinternational-cicd.appspot.com/release_summary/sqpentest/released/${MIGRATE_TRAFFIC} ${WORKSPACE}/releasedfile --recursive"
                        sh "ls"
                        def inputFile = 'releasedfile' // Update with your input file name

                        // Read lines from the input file
                        def lines = readFile inputFile
                        lines = lines.split('\n')
                        def content = lines.join('\n')
                        println(content)
                        def servicePreviousVersions = []
                        for (line in lines) {
                            def keyValuePairs = line.replaceAll("[\\[\\]]", "").split(', ')
                            def params = [:]
                            
                            keyValuePairs.each { pair ->
                                def parts = pair.split(':')
                                params[parts[0].trim()] = parts[1].trim()
                            }
    
                            def service_name = params['service_name']
                            def previous_version = params['previous_version']
    
                            if (service_name && previous_version) {
                                servicePreviousVersions.add("service_name: $service_name, previous_version: $previous_version")
                                sh "gcloud app services set-traffic ${service_name} --splits ${previous_version}=1 --project=${APP_ENGINE_PROJECT_ID} --quiet"
                            } else {
                                println("Invalid line format: $line")
                            }
                        }
                        // Write results to a file
                        def filePath = "${env.WORKSPACE}/revert_traffic-${env.VERSION_NUMBER}.txt"
                        def list = servicePreviousVersions.join('\n')
                        writeFile file: filePath, text: list
                        echo "Items written to ${filePath}"

                        // Copy file to GCP Storage
                        sh "gcloud storage cp ${filePath} gs://sqinternational-cicd.appspot.com/release_summary/revert_traffic/${APP_ENGINE_PROJECT_ID}/${env.VERSION_NUMBER} --recursive"
                    }
                }
            }
        }
    }
}

