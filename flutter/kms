import groovy.transform.Field

@Field def ARR_VERIFY_SERVICE = []
@Field def IS_WEBAPPS_ENABLED


def webapps = [
    [key: 'kms']
]
def checkoutProject(String projectName, String branch) {
    sh "mkdir -p ${projectName}"
    dir("${projectName}") {
        checkout([$class: 'GitSCM', 
            branches: [[name: branch]], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'CleanCheckout']], 
            userRemoteConfigs: [[url: "https://github.com/Bottle-Lab-Technologies-PVT-LTD/kms.git", credentialsId: 'git/devops/new']]])

        sh 'ls -lrt'
        def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        echo "Commit ID: ${commitId}"
        newId = commitId
    }
}

properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select Branch Name',
            filterLength: 1,
            filterable: false,
            name: 'BRANCH_NAME',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["auto-sprint", "auto-release", "hotfix"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        def choices = ["auto-sprint", "auto-release", "hotfix"]
                        return choices
                    '''
                ]
            ] 
        ],
        string(name: 'GIT_BRANCH',defaultValue: '', description: 'hotfix branch name'),
        string(name: 'COMMIT_ID',defaultValue: '', description: 'Enter commit_id'),
        [$class: 'ChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select Project Name',
            filterLength: 1,
            filterable: false,
            name: 'PROJECT_NAME',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["kms:selected"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: '''
                        def choices = ["kms:selected"]
                        return choices
                    '''
                ]
            ] 
        ]
    ])
])

pipeline {
    agent {
        kubernetes {
            defaultContainer 'jnlp'
            yaml '''
            apiVersion: v1
            kind: Pod
            environment:
                name: "NODE_OPTIONS"
                value: "--max-old-space-size=4096"
            spec:
              containers:
              - name: flutter-kms
                image: instrumentisto/flutter:3.19.5
                resources:
                requests:
                    memory: "4096Mi"  # Increase the requested memory
                    cpu: "500m"
                limits:
                    memory: "8192Mi"  # Increase the maximum allowed memory
                    cpu: "1000m"
                command:
                - sh
                args:
                - -c
                - |
                  set -e  # Exit immediately if a command exits with a non-zero status
                  apt-get update && \
                  apt-get install -y wget && \
                  wget https://services.gradle.org/distributions/gradle-8.7-all.zip && \
                  unzip gradle-8.7-all.zip && \
                  ls -l && \
                  sleep 99d
                  tty: true

              - name: gcloud
                image: google/cloud-sdk:latest
                command:
                - cat
                tty: true
            '''        
        }
    }
    environment {
        // Define the keystore-related environment variables
        KEYSTORE_ALIAS = 'smartq'
        KEYSTORE_PASSWORD = 'Smartq@123'
        KEY_PASSWORD = 'Smartq@123'
        MY_SECRET = credentials('flutter-id')
    }
    stages {
        stage('checking project'){
            steps{
                script{
                    //mail_url = 'https://cpgplc.webhook.office.com/webhookb2/6d5ff299-54f8-4bb3-911b-4ef2d419e335@cd62b7dd-4b48-44bd-90e7-e143a22c8ead/IncomingWebhook/3b95c290077440da9d684a0c498039e1/1b69cb54-bc9e-4431-98fa-5afcb910e9d4'

                    if(params.PROJECT_NAME == "All" || params.PROJECT_NAME.isEmpty()){
                        def options = 'kms'
                        ARR_SELECTED_SERVICE = "$options".split(',')
                    }
                    else {
                        ARR_SELECTED_SERVICE = params.PROJECT_NAME.split(',')
                    }
                    echo "Selected Services - $ARR_SELECTED_SERVICE"

                    IS_WEBAPPS_ENABLED = ARR_SELECTED_SERVICE.any { element -> webapps.key.contains(element) }
                    echo "IS_WEBAPPS_ENABLED - $IS_WEBAPPS_ENABLED"
                }                
            }
        }
        stage('checkout stage'){
            steps {
                script {
                    //def bitBucketProject = params.BitBucketProject.toLowerCase()
                    def branch = params.BRANCH_NAME
                    def hotfixbranch = params.GIT_BRANCH //whenever we spcify hotfix parameter please provied commitId parameter because project is pulling from commitid not hotfixbranch
                    def commitid = params.COMMIT_ID
                    //def bucketname = params.Branch
                    echo "selcted branch = ${branch}"
                    echo "selcted hotfixbranch = ${hotfixbranch}"
                    echo "selcted commitid = ${commitid}"
                    if (GIT_BRANCH != '') {
                    	//bucketname="${hotfixbranch}"
                    	branch="${hotfixbranch}"
                    } else if (COMMIT_ID != ''){
                    	branch="${commitid}"                    	
                    } else {
                        branch = params.BRANCH_NAME
                    }
                    
                    if (COMMIT_ID != '' && GIT_BRANCH != ''){
                        branch="${commitId}"
                    }
                    def parallelJobs = [:]
                    ARR_SELECTED_SERVICE.each { service ->
                        parallelJobs["Checkout ${service}"] = {
                            if (service in ['kms']) {
                                checkoutProject(service, branch)
                            }
                        }    
                    }
                    parallel(parallelJobs)
                }
            }
        }
        stage('build stage'){
            steps {
                script {
                    def parallelJobs = [:]
                    if ('kms' in ARR_SELECTED_SERVICE) {
                        //parallelJobs['Build kms'] = {
                            container('flutter-kms') {
                                sh "flutter --version"
                                //withCredentials([file(credentialsId: 'IMD.jks', variable: 'KEYSTORE_PATH')]) {
                                    dir('kms') {
                                        // sh """
                                        // echo "storePassword=${KEYSTORE_PASSWORD}" > android/key.properties
                                        // echo "keyPassword=${KEY_PASSWORD}" >> android/key.properties
                                        // echo "keyAlias=${KEYSTORE_ALIAS}" >> android/key.properties
                                        // echo "storeFile=${KEYSTORE_PATH}" >> android/key.properties
                                        // """
                                        // Print the keystore path (optional, for debugging purposes)
                                        //echo "Keystore path: ${KEYSTORE_PATH}"
                                        sh 'echo "My secret value is: $MY_SECRET"'
                                        sh "git config --global credential.helper store"
                                        sh "echo 'https://Devopssmartq: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@github.com' > ~/.git-credentials"
                                        sh "git config --list"
                                        sh "git clone https://github.com/Bottle-Lab-Technologies-PVT-LTD/common_libs_flutter.git"
                                        sh 'flutter pub get'
                                        sh 'flutter build apk --split-per-abi --release'
                                        dir ('${WORKSPACE}/build') {
                                            sh 'echo changing to directory'
                                            dir('app') {
                                                sh 'ls'
                                                dir('outputs/flutter-apk') {
                                                    sh 'ls -lrt'
                                                }
                                            }
                                        }
                                    }
                                //}
                            }             
                        //}                        
                    }
                    parallel(parallelJobs)
                }
            }
        }
        stage('copy to GCS') {
            steps {
                script {
                    container('gcloud') {
                        if ('kms' in ARR_SELECTED_SERVICE) {
                            dir('kms') {
                                dir ('${WORKSPACE}/build') {
                                    sh 'echo changing to directory'
                                    dir('app') {
                                        sh 'ls'
                                        dir('outputs/apk/release'){
                                            sh 'ls -lrt'
                                            //sh "mv app-release.apk IMD.apk"
                                            //sh "mv app-release.apk.sha1 IMD.apk.sha1"
                                            sh "gcloud storage cp * gs://sqinternational-cicd.appspot.com/Global_Region/${params.BRANCH_NAME}/kms/ --recursive"
                                        }
                                    }
                                }
                            }    
                        } 
                    }
                }
            }
        }
    }
    // post{
    //     always{
    //         script {
    //             office365ConnectorSend webhookUrl: "${mail_url}",
    //             message : "Build is running.\nJob Name: ${Job_Name}.\nBuild Status: ${currentBuild.currentResult}.\nJenkins Build Number: ${Build_Number}.\nApplication  Name: ${projectName}.\nGCP Cloud URL: ${CLOUD_URL}.\n Version Number: ${VERSION_NUMBER} ",
    //             status: "Build Status# ${currentBuild.currentResult}"
    //         }
    //     }
    // }
}
