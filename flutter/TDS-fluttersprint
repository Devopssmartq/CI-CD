pipeline {
    agent {
        kubernetes {
            label 'flutter-test'
            defaultContainer 'jnlp'
            yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: gcloud
            image: google/cloud-sdk:latest
            command:
                - sleep
            args:
                - 99d
            tty: true
                
          - name: flutter
            image: mingc/android-build-box:master
            resources:
              requests:
                memory: "4096Mi"  # Increase the requested memory
                cpu: "500m"
              limits:
                memory: "8192Mi"  # Increase the maximum allowed memory
                cpu: "1000m"
            command:
            - sh
            args:
            - -c
            - |
              set -e  # Exit immediately if a command exits with a non-zero status
              apt-get update && \
              apt-get install -y wget && \
              wget https://services.gradle.org/distributions/gradle-8.7-all.zip && \
			  unzip gradle-8.7-all.zip && \
              ls -l && \
              sleep 99d
            tty: true
        '''        
        }
    }
    environment {
        // Define the keystore-related environment variables
        KEYSTORE_ALIAS = 'smartq'
        KEYSTORE_PASSWORD = 'Smartq@123'
        KEY_PASSWORD = 'Smartq@123'
    }

    stages {
        stage('Checkout flutter') { 
            steps { 
                sh "mkdir -p tds-flutter"
                dir('tds-flutter') {
                    git branch: 'auto-sprint',
                    credentialsId: 'git/devops/new',
                    url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/TDS.git'
                    sh 'ls'
                }
            }                       
        }
        stage('Build tds-flutter') {
            steps {
                container('flutter') {
                    withCredentials([file(credentialsId: 'TDS.jks', variable: 'KEYSTORE_PATH')]) {
                        dir('tds-flutter') {
                            sh """
                            echo "storePassword=${KEYSTORE_PASSWORD}" > android/key.properties
                            echo "keyPassword=${KEY_PASSWORD}" >> android/key.properties
                            echo "keyAlias=${KEYSTORE_ALIAS}" >> android/key.properties
                            echo "storeFile=${KEYSTORE_PATH}" >> android/key.properties
                            """
                            // Print the keystore path (optional, for debugging purposes)
                            echo "Keystore path: ${KEYSTORE_PATH}"
                            sh 'flutter pub get'
                            sh 'flutter build apk --release '
                            dir ('${WORKSPACE}/build') {
                                sh 'echo changing to directory'
                                dir('app') {
                                    sh 'ls'
                                    dir('outputs/flutter-apk') {
                                        sh 'ls -lrt'
                                    }
                                }
                            }
                        }
                    }
                }             
            }       
        }
        stage('copy apk file'){
            steps {
                container('gcloud'){
                    dir('tds-flutter'){
                        dir ('${WORKSPACE}/build') {                            
                        sh 'echo changing to directory'
                            dir('app'){
                                dir('outputs/flutter-apk'){
                                    sh 'ls -lrt'
                                    sh "mv app-release.apk TDS.apk"
                                    sh "mv app-release.apk.sha1 TDS.apk.sha1"
                                    sh 'gcloud storage cp * gs://smartqdemo_pub/ --recursive'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}