pipeline {
  agent {
    kubernetes {
      //label 'jenkins-private-cluster-0'
      defaultContainer 'jnlp'
      yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: jnlp  
    resources:
      requests:
        memory: "2048Mi"
        cpu: "500m"
      limits:
        memory: "4096Mi"
        cpu: "1000m"

  - name: gcloud
    image: google/cloud-sdk:latest
    command:
    - sleep
    args:
    - 99d
    
  - name: native-android
    image: jetbrains/qodana-jvm-android:latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-XX:MaxMetaspaceSize=1g"
    resources:
      requests:
        memory: "2048Mi"
        cpu: "500m"
      limits:
        memory: "4096Mi"
        cpu: "1000m"
    command:
    - sleep
    args:
    - 99d
    tty: true 
    '''
    }
  }
   parameters {

    choice(name: 'ProjectVariant', choices: ['Release', 'Smartq', 'TimeToEat', 'BonAppetit'], description: 'Select project variant')
    }
    //environment {
      //  APP_ENGINE_PROJECT_ID = 'sqinternational-cicd'
        //APP_ENGINE_SERVICE = 'taskqservice'
        //APP_ENGINE_VERSION = '1'
    //}
    stages {
        stage('Checkout') {
            steps {
                sh "mkdir -p kiosk"
                dir('kiosk') {
                    checkout([$class: 'GitSCM', 
                    branches: [[name: "auto-sprint"]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'CleanCheckout']], 
                    userRemoteConfigs: [[url: 'https://github.com/Bottle-Lab-Technologies-PVT-LTD/smartq-kiosk-native.git', credentialsId: 'git-devops',]]])
                        
                    sh 'ls -lrt'
                }
            }            
        }
        
        stage('Build') {
            steps {
                container('native-android') {
                  //def selectVariant = params.ProjectVariant
                    dir('kiosk'){
                      sh 'ls -a'
                      sh './gradlew assembleSmartq'
                    }                    
                }
            }
        }    
    }
}